{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashar\\\\Desktop\\\\current tele\\\\Tele-Healthcare\\\\Tele-Healthcare\\\\Client\\\\src\\\\pages\\\\VideoCall.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from 'axios';\nimport '../App.css';\nimport Doctor from '../components/doctorDashboard';\nimport Button from \"@material-ui/core/Button\";\nimport { IconButton, TextField } from '@material-ui/core';\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Peer from \"peerjs\";\nimport io from \"socket.io-client\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3001\"); // This will generate the user ID dynamically\n\nconst myPeer = new Peer(undefined, {\n  host: '/',\n  port: '5000'\n});\n\nfunction VideoCall() {\n  _s();\n\n  // const [ me, setMe ] = useState(\"\")\n  // const [ stream, setStream ] = useState()\n  // const [ receivingCall, setReceivingCall ] = useState(false)\n  // const [ caller, setCaller ] = useState(\"\")\n  // const [ callerSignal, setCallerSignal ] = useState()\n  // const [ callAccepted, setCallAccepted ] = useState(false)\n  // const [ idToCall, setIdToCall ] = useState(\"\")\n  // const [ callEnded, setCallEnded] = useState(false)\n  // const [ name, setName ] = useState(\"\")\n  // const myVideo = useRef()\n  // const userVideo = useRef()\n  // const connectionRef= useRef()\n  // useEffect(() => {\n  // \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\n  // \t\tsetStream(stream)\n  // \t\t\tmyVideo.current.srcObject = stream\n  // \t})\n  // socket.on(\"me\", (id) => {\n  // \t\tsetMe(id)\n  // \t})\n  // \tsocket.on(\"callUser\", (data) => {\n  // \t\tsetReceivingCall(true)\n  // \t\tsetCaller(data.from)\n  // \t\tsetName(data.name)\n  // \t\tsetCallerSignal(data.signal)\n  // \t})\n  // }, [])\n  // const callUser = (id) => {\n  // \tconst peer = new Peer({\n  // \t\tinitiator: true,\n  // \t\ttrickle: false,\n  // \t\tstream: stream\n  // \t})\n  // \tpeer.on(\"signal\", (data) => {\n  // \t\tsocket.emit(\"callUser\", {\n  // \t\t\tuserToCall: id,\n  // \t\t\tsignalData: data,\n  // \t\t\tfrom: me,\n  // \t\t\tname: name\n  // \t\t})\n  // \t})\n  // \tpeer.on(\"stream\", (stream) => {\n  // \t\t\tuserVideo.current.srcObject = stream\n  // \t})\n  // \tsocket.on(\"callAccepted\", (signal) => {\n  // \t\tsetCallAccepted(true)\n  // \t\tpeer.signal(signal)\n  // \t})\n  // \tconnectionRef.current = peer\n  // }\n  // const answerCall =() =>  {\n  // \tsetCallAccepted(true)\n  // \tconst peer = new Peer({\n  // \t\tinitiator: false,\n  // \t\ttrickle: false,\n  // \t\tstream: stream\n  // \t})\n  // \tpeer.on(\"signal\", (data) => {\n  // \t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\n  // \t})\n  // \tpeer.on(\"stream\", (stream) => {\n  // \t\tuserVideo.current.srcObject = stream\n  // \t})\n  // \tpeer.signal(callerSignal)\n  // \tconnectionRef.current = peer\n  // }\n  // const leaveCall = () => {\n  // \tsetCallEnded(true)\n  // \tconnectionRef.current.destroy()\n  // }\n  const [render, setRender] = useState(true);\n\n  const getDoctorID = () => {\n    Axios.get('http://localhost:3001/Doctor_ID').then(res => {\n      // setList(res.data)\n      var string = JSON.stringify(res.data);\n      var json = JSON.parse(string); // alert(string)\n      // alert(json.doctor_id);\n\n      if (json.doctor_id === 0) {\n        setRender(false);\n        window.location = '/';\n        alert(\"You Need To Sign In First!!!\");\n      } // else{\n      //   setRender(true)\n      // }\n\n    });\n  };\n\n  getDoctorID();\n  const [video_id, setVideoId] = useState(useParams().video_id); //   alert(video_id)\n\n  const videoGrid = document.getElementById('video-grid');\n  const myVideo = document.createElement('video');\n  myVideo.muted = true;\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  }).then(stream => {\n    // stream is gonna be video and audio\n    addVideoStream(myVideo, stream);\n  });\n  myPeer.on('open', id => {\n    // Send an event to the server\n    socket.emit('join-room', video_id, id);\n  });\n\n  function addVideoStream(video, stream) {\n    video.srcObject = stream; // loading stream \n\n    video.addEventListener('loadedmetadata', () => {\n      video.play(); // play video\n    });\n    videoGrid.appendChild(video);\n  }\n\n  socket.on('user-connected', userId => {\n    alert(userId);\n    console.log(userId);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: render && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-grid\",\n        id: \"video-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"dd\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"dd\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoCall, \"dd7Az2CHZE6IE+RSfvnAuZ4KpJk=\", false, function () {\n  return [useParams];\n});\n\n_c = VideoCall;\nexport default VideoCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"sources":["C:/Users/ashar/Desktop/current tele/Tele-Healthcare/Tele-Healthcare/Client/src/pages/VideoCall.js"],"names":["React","useEffect","useRef","useState","Axios","Doctor","Button","IconButton","TextField","AssignmentIcon","PhoneIcon","CopyToClipboard","Peer","io","useParams","socket","myPeer","undefined","host","port","VideoCall","render","setRender","getDoctorID","get","then","res","string","JSON","stringify","data","json","parse","doctor_id","window","location","alert","video_id","setVideoId","videoGrid","document","getElementById","myVideo","createElement","muted","navigator","mediaDevices","getUserMedia","video","audio","stream","addVideoStream","on","id","emit","srcObject","addEventListener","play","appendChild","userId","console","log"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport Axios from'axios';\r\nimport '../App.css'\r\nimport Doctor from '../components/doctorDashboard'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\r\nimport PhoneIcon from \"@material-ui/icons/Phone\"\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\nimport Peer from \"peerjs\"\r\nimport io from \"socket.io-client\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nconst socket = io(\"http://localhost:3001\")\r\n\r\n\r\n\r\n\t// This will generate the user ID dynamically\r\n\tconst myPeer = new Peer(undefined, {\r\n\t\thost: '/',\r\n\t\tport: '5000'\r\n\t})\r\n\r\n\r\nfunction VideoCall() {\r\n\r\n\r\n    // const [ me, setMe ] = useState(\"\")\r\n\t// const [ stream, setStream ] = useState()\r\n\t// const [ receivingCall, setReceivingCall ] = useState(false)\r\n\t// const [ caller, setCaller ] = useState(\"\")\r\n\t// const [ callerSignal, setCallerSignal ] = useState()\r\n\t// const [ callAccepted, setCallAccepted ] = useState(false)\r\n\t// const [ idToCall, setIdToCall ] = useState(\"\")\r\n\t// const [ callEnded, setCallEnded] = useState(false)\r\n\t// const [ name, setName ] = useState(\"\")\r\n\t// const myVideo = useRef()\r\n\t// const userVideo = useRef()\r\n\t// const connectionRef= useRef()\r\n\r\n\t// useEffect(() => {\r\n\t// \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n\t// \t\tsetStream(stream)\r\n\t// \t\t\tmyVideo.current.srcObject = stream\r\n\t// \t})\r\n\r\n\t// socket.on(\"me\", (id) => {\r\n\t// \t\tsetMe(id)\r\n\t// \t})\r\n\r\n\t// \tsocket.on(\"callUser\", (data) => {\r\n\t// \t\tsetReceivingCall(true)\r\n\t// \t\tsetCaller(data.from)\r\n\t// \t\tsetName(data.name)\r\n\t// \t\tsetCallerSignal(data.signal)\r\n\t// \t})\r\n\t// }, [])\r\n\r\n\t// const callUser = (id) => {\r\n\t// \tconst peer = new Peer({\r\n\t// \t\tinitiator: true,\r\n\t// \t\ttrickle: false,\r\n\t// \t\tstream: stream\r\n\t// \t})\r\n\t// \tpeer.on(\"signal\", (data) => {\r\n\t// \t\tsocket.emit(\"callUser\", {\r\n\t// \t\t\tuserToCall: id,\r\n\t// \t\t\tsignalData: data,\r\n\t// \t\t\tfrom: me,\r\n\t// \t\t\tname: name\r\n\t// \t\t})\r\n\t// \t})\r\n\t// \tpeer.on(\"stream\", (stream) => {\r\n\t\t\t\r\n\t// \t\t\tuserVideo.current.srcObject = stream\r\n\t\t\t\r\n\t// \t})\r\n\t// \tsocket.on(\"callAccepted\", (signal) => {\r\n\t// \t\tsetCallAccepted(true)\r\n\t// \t\tpeer.signal(signal)\r\n\t// \t})\r\n\r\n\t// \tconnectionRef.current = peer\r\n\t// }\r\n\r\n\t// const answerCall =() =>  {\r\n\t// \tsetCallAccepted(true)\r\n\t// \tconst peer = new Peer({\r\n\t// \t\tinitiator: false,\r\n\t// \t\ttrickle: false,\r\n\t// \t\tstream: stream\r\n\t// \t})\r\n\t// \tpeer.on(\"signal\", (data) => {\r\n\t// \t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\r\n\t// \t})\r\n\t// \tpeer.on(\"stream\", (stream) => {\r\n\t// \t\tuserVideo.current.srcObject = stream\r\n\t// \t})\r\n\r\n\t// \tpeer.signal(callerSignal)\r\n\t// \tconnectionRef.current = peer\r\n\t// }\r\n\r\n\t// const leaveCall = () => {\r\n\t// \tsetCallEnded(true)\r\n\t// \tconnectionRef.current.destroy()\r\n\t// }\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n        \r\n    const [render, setRender] = useState(true)\r\n\r\n    const getDoctorID = ()=>{\r\n      \r\n        Axios.get('http://localhost:3001/Doctor_ID').then(res => {\r\n                  \r\n        // setList(res.data)\r\n        \r\n      \r\n        var string = JSON.stringify(res.data)\r\n            \r\n        var json = JSON.parse(string)\r\n      \r\n      // alert(string)\r\n        // alert(json.doctor_id);\r\n\r\n\r\n        if(json.doctor_id === 0){\r\n          setRender(false)\r\n          window.location='/'\r\n          alert(\"You Need To Sign In First!!!\")\r\n        }\r\n        \r\n        // else{\r\n        //   setRender(true)\r\n        // }\r\n            })\r\n      \r\n      }\r\n      \r\n      getDoctorID()\r\n      \r\n\r\n\r\n\t  const [video_id,setVideoId]=useState(useParams().video_id)\r\n\t  \r\n\t  //   alert(video_id)\r\n\t  \r\n\t  \r\n\r\n\r\n\t  const videoGrid = document.getElementById('video-grid')\r\n\r\n\r\n\t  const myVideo = document.createElement('video')\r\n\t  myVideo.muted = true\r\n  \r\n  \r\n\t  navigator.mediaDevices.getUserMedia({\r\n\t\t  video: true,\r\n\t\t  audio: true\r\n\t  }).then((stream)=>{ // stream is gonna be video and audio\r\n\t\t  addVideoStream(myVideo, stream)\r\n\t  })\r\n  \r\n\t\r\n\r\n\tmyPeer.on('open', (id)=>{\t\t\r\n\r\n\t\t// Send an event to the server\r\n\t\tsocket.emit('join-room', video_id, id)\r\n\t\r\n\t})\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function addVideoStream(video, stream){\r\n\r\n\t\tvideo.srcObject = stream \r\n\r\n\t\t// loading stream \r\n\t\tvideo.addEventListener('loadedmetadata', ()=>{\r\n\t\t\tvideo.play() // play video\r\n\t\t})\r\n\r\n\t\tvideoGrid.appendChild(video)\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nsocket.on('user-connected', (userId)=>{\r\n\talert(userId)\r\n\tconsole.log(userId)\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn(\r\n\r\n    \r\n    <div>\r\n    {render && (\r\n\t\t<div>\r\n\t\t\r\n\t\t\r\n\t\t  {/* <script src='/VideoCall.js'></script> */}\r\n      \r\n\t  \r\n\t  {/* <Doctor/> */}\r\n\r\n\t  <div className='video-grid' id='video-grid'>\r\n\t\t  <h1>dd</h1>\r\n\t\t  <h1>dd</h1>\r\n\r\n\t  </div>\r\n\r\n\r\n{/* \r\n      <>\r\n\t\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"video-container\">\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{callAccepted && !callEnded ?\r\n\t\t\t\t\t<video playsInline ref={userVideo} autoPlay style={{ width: \"300px\"}} />:\r\n\t\t\t\t\tnull}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"myId\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\tstyle={{ marginBottom: \"20px\" }}\r\n\t\t\t\t/>\r\n\t\t\t\t<CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\r\n\t\t\t\t\t\tCopy ID\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</CopyToClipboard>\r\n\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"ID to call\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={idToCall}\r\n\t\t\t\t\tonChange={(e) => setIdToCall(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"call-button\">\r\n\t\t\t\t\t{callAccepted && !callEnded ? (\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n\t\t\t\t\t\t\tEnd Call\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n\t\t\t\t\t\t\t<PhoneIcon fontSize=\"large\" />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{idToCall}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{receivingCall && !callAccepted ? (\r\n\t\t\t\t\t\t<div className=\"caller\">\r\n\t\t\t\t\t\t<h1 >{name} is calling...</h1>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n\t\t\t\t\t\t\tAnswer\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</> */}\r\n    \r\n        \r\n      </div>\r\n\r\n    )}\r\n  </div>\r\n  \r\n\r\n)\r\n\r\n\r\n}\r\n\r\nexport default VideoCall"]},"metadata":{},"sourceType":"module"}