{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashar\\\\Desktop\\\\current tele\\\\Tele-Healthcare\\\\Tele-Healthcare\\\\Client\\\\src\\\\pages\\\\VideoCall.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from 'axios';\nimport '../App.css';\nimport Doctor from '../components/doctorDashboard';\nimport Button from \"@material-ui/core/Button\";\nimport { IconButton, TextField } from '@material-ui/core';\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Peer from \"simple-peer\";\nimport io from \"socket.io-client\";\nimport { useParams } from 'react-router-dom';\nimport { Video } from 'video-react';\nimport { Assignment, Phone, PhoneDisabled } from '@material-ui/icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophoneSlash, faCircle } from '@fortawesome/free-solid-svg-icons';\nimport { Container, Grid, Typography, Paper, makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3001\"); // \t// This will generate the user ID dynamically\n// const myPeer = new Peer(undefined, {\n// \thost: '/',\n// \tport: '5000'\n// })\n\nfunction VideoCall() {\n  _s();\n\n  const [render, setRender] = useState(true);\n\n  const getDoctorID = () => {\n    Axios.get('http://localhost:3001/Doctor_ID').then(res => {\n      // setList(res.data)\n      var string = JSON.stringify(res.data);\n      var json = JSON.parse(string); // alert(string)\n      // alert(json.doctor_id);\n\n      if (json.doctor_id === 0) {\n        setRender(false);\n        window.location = '/';\n        alert(\"You Need To Sign In First!!!\");\n      }\n    });\n  };\n\n  getDoctorID(); // const [ stream, setStream ] = useState(false)\n  // const [ patientstream, setPatientStream ] = useState(false)\n  // const myVideo = useRef()\n  // const patientVideo = useRef()\n  // const [video_id,setVideoId]=useState(useParams().video_id)\n  // const peers = {}\n  // useEffect(() => {\n  // \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\n  // \t\tsetStream(true)\n  // \t\t\tmyVideo.current.srcObject = stream\n  // \t\t\t\t// addVideoStream(myVideo, stream)\n  // \t\t\t\tsocket.on('user-connected', (userId)=>{\n  // \t\t\t\t\t// alert(userId)\n  // \t\t\t\t\t// console.log(userId)\n  // \t\t\t\t\tsetTimeout(connectToNewUser,1000,userId,stream)\n  // \t\t\t\t})\n  // \tmyPeer.on('call', (call)=>{\n  // \t\tcall.answer(stream)\n  // \t\t//   const video = document.createElement('video')\n  // \t\t// event for the user to send their stream to us\n  // \t\t// call.on('stream', (userVideoStream)=>{\n  // \t\t// \t// addVideoStream(video, userVideoStream)\n  // \t\t// \tsetPatientStream(true)\n  // \t\t// \tpatientVideo.current.srcObject = userVideoStream\n  // \t\t// })\n  // \t  })\n  // })\n  // }, [])\n  //   socket.on('user-disconnected', (userId)=>{\n  // \t// alert('pp')\n  // \tconsole.log('user: ' + userId)\n  // \tif(peers[userId]){\n  // \t\t  peers[userId].close()\n  // \t  }\n  //   })\n  //   myPeer.on('open', (id)=>{\t\t\n  // \t// Send an event to the server\n  // \tsocket.emit('join-room', video_id, id)\n  // })\n  // function connectToNewUser(userId, stream){\n  // \tconst call = myPeer.call(userId, stream) // calling the user and sending our stream\n  // \t// event for the user to send their stream to us\n  // \tcall.on('stream', (userVideoStream)=>{\n  // \t\tsetPatientStream(true)\n  // \t\tpatientVideo.current.srcObject = userVideoStream\n  // \t})\n  // \tcall.on('close', ()=>{\n  // \t\t// video.remove()\n  // \t\tsetPatientStream(false)\n  // \t\t// document.querySelector('patientVideo').remove()\n  // \t})\n  // \tpeers[userId] = call\n  // }\n\n  const useStyles = makeStyles(theme => ({\n    video: {\n      width: '550px',\n      [theme.breakpoints.down('xs')]: {\n        width: '300px'\n      }\n    },\n    gridContainer: {\n      justifyContent: 'center',\n      [theme.breakpoints.down('xs')]: {\n        flexDirection: 'column',\n        width: '300px'\n      }\n    },\n    paper: {\n      padding: '10px',\n      border: '2px solid black',\n      margin: '10px'\n    },\n    root: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    gridContainer2: {\n      width: '100%',\n      [theme.breakpoints.down('xs')]: {\n        flexDirection: 'column'\n      }\n    },\n    container2: {\n      width: '600px',\n      margin: '35px 0',\n      padding: 0,\n      [theme.breakpoints.down('xs')]: {\n        width: '80%'\n      }\n    },\n    margin2: {\n      marginTop: 20\n    },\n    padding2: {\n      padding: 20\n    },\n    paper2: {\n      padding: '10px 20px',\n      border: '2px solid black'\n    },\n    wrapper: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      width: '100%'\n    }\n  }));\n  const classes = useStyles(); // const [callAccepted, setCallAccepted] = useState(false);\n  // const [callEnded, setCallEnded] = useState(false);\n  // const [stream, setStream] = useState();\n  // const [name, setName] = useState('');\n  // const [call, setCall] = useState({});\n  // const [me, setMe] = useState('');\n  // const [idToCall, setIdToCall] = useState('');\n  // const myVideo = useRef();\n  // const userVideo = useRef();\n  // const connectionRef = useRef();\n  // useEffect(() => {\n  //   navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n  //     .then((currentStream) => {\n  //       setStream(currentStream);\n  //       myVideo.current.srcObject = currentStream;\n  //     });\n  //   socket.on('me', (id) => setMe(id));\n  //   socket.on('callUser', ({ from, name: callerName, signal }) => {\n  //     setCall({ isReceivingCall: true, from, name: callerName, signal });\n  //   });\n  //   socket.on('usercallEnded', ()=> {\n  //     setCallEnded(true);\n  //     setCallAccepted(false)\n  //       // connectionRef.current.destroy();\n  //       })\n  // }, []);\n  // const answerCall = () => {\n  //   setCallAccepted(true);\n  //   const peer = new Peer({ initiator: false, trickle: false, stream });\n  //   peer.on('signal', (data) => {\n  //     socket.emit('answerCall', { signal: data, to: call.from });\n  //   });\n  //   peer.on('stream', (currentStream) => {\n  //     userVideo.current.srcObject = currentStream;\n  //   });\n  //   peer.signal(call.signal);\n  //   connectionRef.current = peer;\n  // };\n  // const callUser = (id) => {\n  //   const peer = new Peer({ initiator: true, trickle: false, stream });\n  //   peer.on('signal', (data) => {\n  //     socket.emit('callUser', { userToCall: id, signalData: data, from: me, name });\n  //   });\n  //   peer.on('stream', (currentStream) => {\n  //     userVideo.current.srcObject = currentStream;\n  //   });\n  //   socket.on('callAccepted', (signal) => {\n  //     setCallAccepted(true);\n  //     peer.signal(signal);\n  //   });\n  //   connectionRef.current = peer;\n  // };\n  // const leaveCall = () => {\n  // // setCallEnded(true);\n  // // setCallAccepted(false)\n  // //   connectionRef.current.destroy();\n  //   socket.emit('usercallEnded', idToCall)\n  //   // window.location.reload();\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: render && /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoCall, \"0/3Hvv2R+GZdg7QDxiQ4NtsGm/M=\", false, function () {\n  return [useStyles];\n});\n\n_c = VideoCall;\nexport default VideoCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"sources":["C:/Users/ashar/Desktop/current tele/Tele-Healthcare/Tele-Healthcare/Client/src/pages/VideoCall.js"],"names":["React","useEffect","useRef","useState","Axios","Doctor","Button","IconButton","TextField","AssignmentIcon","PhoneIcon","CopyToClipboard","Peer","io","useParams","Video","Assignment","Phone","PhoneDisabled","FontAwesomeIcon","faMicrophoneSlash","faCircle","Container","Grid","Typography","Paper","makeStyles","socket","VideoCall","render","setRender","getDoctorID","get","then","res","string","JSON","stringify","data","json","parse","doctor_id","window","location","alert","useStyles","theme","video","width","breakpoints","down","gridContainer","justifyContent","flexDirection","paper","padding","border","margin","root","display","gridContainer2","container2","margin2","marginTop","padding2","paper2","wrapper","alignItems","classes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAOC,KAAP,MAAiB,OAAjB;AACA,OAAO,YAAP;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,mBAAtC;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAAQC,KAAR,QAAoB,aAApB;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,aAA5B,QAAiD,oBAAjD;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAAQC,iBAAR,EAA2BC,QAA3B,QAA2C,mCAA3C;AACA,SAAQC,SAAR,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCC,KAArC,EAA4CC,UAA5C,QAA8D,mBAA9D;;AAMA,MAAMC,MAAM,GAAGd,EAAE,CAAC,uBAAD,CAAjB,C,CAIC;AACA;AACA;AACA;AACA;;AAQD,SAASe,SAAT,GAAqB;AAAA;;AAGjB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsB3B,QAAQ,CAAC,IAAD,CAApC;;AAEA,QAAM4B,WAAW,GAAG,MAAI;AAEpB3B,IAAAA,KAAK,CAAC4B,GAAN,CAAU,iCAAV,EAA6CC,IAA7C,CAAkDC,GAAG,IAAI;AAEzD;AAGA,UAAIC,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAeH,GAAG,CAACI,IAAnB,CAAb;AAEA,UAAIC,IAAI,GAAGH,IAAI,CAACI,KAAL,CAAWL,MAAX,CAAX,CAPyD,CAS3D;AACE;;AAGA,UAAGI,IAAI,CAACE,SAAL,KAAmB,CAAtB,EAAwB;AACtBX,QAAAA,SAAS,CAAC,KAAD,CAAT;AACAY,QAAAA,MAAM,CAACC,QAAP,GAAgB,GAAhB;AACAC,QAAAA,KAAK,CAAC,8BAAD,CAAL;AACD;AAEI,KAnBL;AAqBD,GAvBH;;AAyBEb,EAAAA,WAAW,GA9BI,CA0CpB;AACA;AAEA;AACA;AAGA;AAKA;AAMA;AACA;AAEA;AACA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AAEA;AAGA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAOA;AAEA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAEA;AAQA;AAGA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAGA;AAEA;;AAID,QAAMc,SAAS,GAAGnB,UAAU,CAAEoB,KAAD,KAAY;AACxCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,OADF;AAEL,OAACF,KAAK,CAACG,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAgC;AACjCF,QAAAA,KAAK,EAAE;AAD0B;AAF3B,KADiC;AAOxCG,IAAAA,aAAa,EAAE;AACbC,MAAAA,cAAc,EAAE,QADH;AAEb,OAACN,KAAK,CAACG,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAgC;AACjCG,QAAAA,aAAa,EAAE,QADkB;AAEjCL,QAAAA,KAAK,EAAE;AAF0B;AAFnB,KAPyB;AAexCM,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,MAAM,EAAE,iBAFH;AAGLC,MAAAA,MAAM,EAAE;AAHH,KAfiC;AAqBxCC,IAAAA,IAAI,EAAE;AACLC,MAAAA,OAAO,EAAE,MADJ;AAELN,MAAAA,aAAa,EAAE;AAFV,KArBkC;AAyBtCO,IAAAA,cAAc,EAAE;AACjBZ,MAAAA,KAAK,EAAE,MADU;AAEjB,OAACF,KAAK,CAACG,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAgC;AAC9BG,QAAAA,aAAa,EAAE;AADe;AAFf,KAzBsB;AA+BtCQ,IAAAA,UAAU,EAAE;AACbb,MAAAA,KAAK,EAAE,OADM;AAEbS,MAAAA,MAAM,EAAE,QAFK;AAGbF,MAAAA,OAAO,EAAE,CAHI;AAIb,OAACT,KAAK,CAACG,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAgC;AAC9BF,QAAAA,KAAK,EAAE;AADuB;AAJnB,KA/B0B;AAuCtCc,IAAAA,OAAO,EAAE;AACVC,MAAAA,SAAS,EAAE;AADD,KAvC6B;AA0CtCC,IAAAA,QAAQ,EAAE;AACXT,MAAAA,OAAO,EAAE;AADE,KA1C4B;AA6CtCU,IAAAA,MAAM,EAAE;AACTV,MAAAA,OAAO,EAAE,WADA;AAETC,MAAAA,MAAM,EAAE;AAFC,KA7C8B;AAiDtCU,IAAAA,OAAO,EAAE;AACVP,MAAAA,OAAO,EAAE,MADC;AAEVN,MAAAA,aAAa,EAAE,QAFL;AAGVc,MAAAA,UAAU,EAAE,QAHF;AAIVnB,MAAAA,KAAK,EAAE;AAJG;AAjD6B,GAAZ,CAAD,CAA5B;AAyDE,QAAMoB,OAAO,GAAGvB,SAAS,EAAzB,CAtOmB,CA4OnB;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAIA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAMA;AAEA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAGA;AAOA;AAED;AACA;AACC;AAGA;AAEA;AACA;;AAKF,sBAGI;AAAA,cACChB,MAAM,iBACT;AAAA;AAAA;AAAA;AAAA;AAFE;AAAA;AAAA;AAAA;AAAA,UAHJ;AAoGC;;GAlcQD,S;UAsOSiB,S;;;KAtOTjB,S;AAscT,eAAeA,SAAf","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport Axios from'axios';\r\nimport '../App.css'\r\nimport Doctor from '../components/doctorDashboard'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\r\nimport PhoneIcon from \"@material-ui/icons/Phone\"\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\nimport Peer from \"simple-peer\"\r\nimport io from \"socket.io-client\";\r\nimport { useParams } from 'react-router-dom';\r\nimport {Video} from 'video-react'\r\nimport { Assignment, Phone, PhoneDisabled } from '@material-ui/icons'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faMicrophoneSlash, faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport {Container, Grid, Typography, Paper, makeStyles } from '@material-ui/core';\r\n\r\n\r\n\r\n\r\n\r\nconst socket = io(\"http://localhost:3001\")\r\n\r\n\r\n\r\n\t// \t// This will generate the user ID dynamically\r\n\t// const myPeer = new Peer(undefined, {\r\n\t// \thost: '/',\r\n\t// \tport: '5000'\r\n\t// })\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n\r\nfunction VideoCall() {\r\n\r\n\r\n    const [render, setRender] = useState(true)\r\n\r\n    const getDoctorID = ()=>{\r\n      \r\n        Axios.get('http://localhost:3001/Doctor_ID').then(res => {\r\n                  \r\n        // setList(res.data)\r\n        \r\n      \r\n        var string = JSON.stringify(res.data)\r\n            \r\n        var json = JSON.parse(string)\r\n      \r\n      // alert(string)\r\n        // alert(json.doctor_id);\r\n\r\n\r\n        if(json.doctor_id === 0){\r\n          setRender(false)\r\n          window.location='/'\r\n          alert(\"You Need To Sign In First!!!\")\r\n        }\r\n        \r\n            })\r\n      \r\n      }\r\n      \r\n      getDoctorID()\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\t  \r\n\r\n\r\n\r\n\r\n\t// const [ stream, setStream ] = useState(false)\r\n\t// const [ patientstream, setPatientStream ] = useState(false)\r\n\r\n\t// const myVideo = useRef()\r\n\t// const patientVideo = useRef()\r\n\r\n\r\n\t// const [video_id,setVideoId]=useState(useParams().video_id)\r\n\t  \r\n\t\r\n\r\n\r\n\t// const peers = {}\r\n\r\n\r\n\r\n\r\n\r\n\t// useEffect(() => {\r\n\t// \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n\r\n\t// \t\tsetStream(true)\r\n\t// \t\t\tmyVideo.current.srcObject = stream\r\n\r\n\r\n\t// \t\t\t\t// addVideoStream(myVideo, stream)\r\n\r\n\r\n\r\n\t// \t\t\t\tsocket.on('user-connected', (userId)=>{\r\n\t// \t\t\t\t\t// alert(userId)\r\n\t// \t\t\t\t\t// console.log(userId)\r\n\t\t\t\t\r\n\t// \t\t\t\t\tsetTimeout(connectToNewUser,1000,userId,stream)\r\n\t// \t\t\t\t})\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\r\n\t// \tmyPeer.on('call', (call)=>{\r\n\r\n\t\t\t\r\n\t// \t\tcall.answer(stream)\r\n\t\t\t  \r\n\t// \t\t//   const video = document.createElement('video')\r\n\t\r\n\t\r\n\t// \t\t// event for the user to send their stream to us\r\n\t// \t\t// call.on('stream', (userVideoStream)=>{\r\n\t// \t\t// \t// addVideoStream(video, userVideoStream)\r\n\r\n\t// \t\t// \tsetPatientStream(true)\r\n\t\r\n\t\r\n\t// \t\t// \tpatientVideo.current.srcObject = userVideoStream\r\n\t// \t\t// })\r\n\t\r\n\t// \t  })\r\n\r\n\t\t\r\n\r\n\t\t  \r\n\r\n\t\t  \r\n\t// })\r\n\r\n\t// }, [])\r\n\r\n\r\n\t\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\t//   socket.on('user-disconnected', (userId)=>{\r\n\t// \t// alert('pp')\r\n\t// \tconsole.log('user: ' + userId)\r\n\t\t\r\n\t// \tif(peers[userId]){\r\n\t// \t\t  peers[userId].close()\r\n\t// \t  }\r\n\t//   })\r\n\r\n\r\n\t  \r\n\r\n\t//   myPeer.on('open', (id)=>{\t\t\r\n\r\n\t// \t// Send an event to the server\r\n\t// \tsocket.emit('join-room', video_id, id)\r\n\t\r\n\t// })\r\n\t\r\n\t\r\n\r\n\r\n    \r\n\r\n\r\n\t// function connectToNewUser(userId, stream){\r\n\r\n\t\t\r\n\t// \tconst call = myPeer.call(userId, stream) // calling the user and sending our stream\r\n\t\t\r\n\t\r\n\t// \t// event for the user to send their stream to us\r\n\t// \tcall.on('stream', (userVideoStream)=>{\r\n\t\r\n\t// \t\tsetPatientStream(true)\r\n\t// \t\tpatientVideo.current.srcObject = userVideoStream\r\n\r\n\t// \t})\r\n\r\n\t// \tcall.on('close', ()=>{\r\n\t\t\t\r\n\t// \t\t// video.remove()\r\n\r\n\t// \t\tsetPatientStream(false)\r\n\r\n\t// \t\t// document.querySelector('patientVideo').remove()\r\n\t// \t})\r\n\r\n\r\n\t// \tpeers[userId] = call\r\n\r\n\t// }\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tvideo: {\r\n\t  width: '550px',\r\n\t  [theme.breakpoints.down('xs')]: {\r\n\t\twidth: '300px',\r\n\t  },\r\n\t},\r\n\tgridContainer: {\r\n\t  justifyContent: 'center',\r\n\t  [theme.breakpoints.down('xs')]: {\r\n\t\tflexDirection: 'column',\r\n\t\twidth: '300px'\r\n\r\n\t  },\r\n\t},\r\n\tpaper: {\r\n\t  padding: '10px',\r\n\t  border: '2px solid black',\r\n\t  margin: '10px',\r\n\t},\r\n\r\n\troot: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t  },\r\n\t  gridContainer2: {\r\n\t\twidth: '100%',\r\n\t\t[theme.breakpoints.down('xs')]: {\r\n\t\t  flexDirection: 'column',\r\n\t\t},\r\n\t  },\r\n\t  container2: {\r\n\t\twidth: '600px',\r\n\t\tmargin: '35px 0',\r\n\t\tpadding: 0,\r\n\t\t[theme.breakpoints.down('xs')]: {\r\n\t\t  width: '80%',\r\n\t\t},\r\n\t  },\r\n\t  margin2: {\r\n\t\tmarginTop: 20,\r\n\t  },\r\n\t  padding2: {\r\n\t\tpadding: 20,\r\n\t  },\r\n\t  paper2: {\r\n\t\tpadding: '10px 20px',\r\n\t\tborder: '2px solid black',\r\n\t  },\r\n\t  wrapper: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\talignItems: 'center',\r\n\t\twidth: '100%',\r\n\t  }\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n\r\n\r\n\r\n  // const [callAccepted, setCallAccepted] = useState(false);\r\n  // const [callEnded, setCallEnded] = useState(false);\r\n  // const [stream, setStream] = useState();\r\n  // const [name, setName] = useState('');\r\n  // const [call, setCall] = useState({});\r\n  // const [me, setMe] = useState('');\r\n  // const [idToCall, setIdToCall] = useState('');\r\n\r\n  \r\n\r\n  // const myVideo = useRef();\r\n  // const userVideo = useRef();\r\n  // const connectionRef = useRef();\r\n\r\n  // useEffect(() => {\r\n  //   navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n  //     .then((currentStream) => {\r\n  //       setStream(currentStream);\r\n\r\n  //       myVideo.current.srcObject = currentStream;\r\n  //     });\r\n\r\n  //   socket.on('me', (id) => setMe(id));\r\n\r\n  //   socket.on('callUser', ({ from, name: callerName, signal }) => {\r\n  //     setCall({ isReceivingCall: true, from, name: callerName, signal });\r\n  //   });\r\n\r\n\r\n  //   socket.on('usercallEnded', ()=> {\r\n    \r\n  //     setCallEnded(true);\r\n  //     setCallAccepted(false)\r\n  //       // connectionRef.current.destroy();\r\n    \r\n  //       })\r\n\r\n        \r\n\r\n  // }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // const answerCall = () => {\r\n  //   setCallAccepted(true);\r\n\r\n  //   const peer = new Peer({ initiator: false, trickle: false, stream });\r\n\r\n  //   peer.on('signal', (data) => {\r\n  //     socket.emit('answerCall', { signal: data, to: call.from });\r\n  //   });\r\n\r\n  //   peer.on('stream', (currentStream) => {\r\n  //     userVideo.current.srcObject = currentStream;\r\n  //   });\r\n\r\n  //   peer.signal(call.signal);\r\n\r\n  //   connectionRef.current = peer;\r\n  // };\r\n\r\n\r\n\r\n\r\n\r\n  // const callUser = (id) => {\r\n    \r\n  //   const peer = new Peer({ initiator: true, trickle: false, stream });\r\n\r\n  \r\n  //   peer.on('signal', (data) => {\r\n  //     socket.emit('callUser', { userToCall: id, signalData: data, from: me, name });\r\n  //   });\r\n\r\n  \r\n  //   peer.on('stream', (currentStream) => {\r\n  //     userVideo.current.srcObject = currentStream;\r\n  //   });\r\n\r\n  \r\n  //   socket.on('callAccepted', (signal) => {\r\n  //     setCallAccepted(true);\r\n\r\n  //     peer.signal(signal);\r\n  //   });\r\n\r\n  //   connectionRef.current = peer;\r\n  \r\n  \r\n  // };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // const leaveCall = () => {\r\n    \r\n\t// // setCallEnded(true);\r\n\t// // setCallAccepted(false)\r\n  // //   connectionRef.current.destroy();\r\n\r\n\r\n  //   socket.emit('usercallEnded', idToCall)\r\n    \r\n  //   // window.location.reload();\r\n  // };\r\n\r\n\r\n\r\n\r\nreturn(\r\n\r\n    \r\n    <div >\r\n    {render && (\r\n\t\t<div>\r\n\t\t\t\r\n\r\n\r\n\r\n{/* <Doctor/>  */}\r\n\r\n\r\n\r\n{/* <div className={classes.wrapper}>\r\n    \r\n\t<body>\r\n<Grid container className={classes.gridContainer}>\r\n      {stream && (\r\n        <Paper className={classes.paper}>\r\n          <Grid item xs={12} md={6}>\r\n            <Typography variant=\"h5\" gutterBottom>{name || 'Name'}</Typography>\r\n            <video playsInline muted ref={myVideo} autoPlay className={classes.video} />\r\n          </Grid>\r\n        </Paper>\r\n      )}\r\n      {callAccepted && !callEnded &&(\r\n        <Paper className={classes.paper}>\r\n          <Grid item xs={12} md={6}>\r\n            <Typography variant=\"h5\" gutterBottom>{call.name || 'Name'}</Typography>\r\n            <video playsInline ref={userVideo} autoPlay className={classes.video} />\r\n          </Grid>\r\n        </Paper>\r\n      )}\r\n    </Grid>      \r\n\t  \r\n\r\n</body>\r\n\r\n\t<Container className={classes.container2}>\r\n      <Paper elevation={10} className={classes.paper2}>\r\n        <form className={classes.root} noValidate autoComplete=\"off\">\r\n          <Grid container className={classes.gridContainer2}>\r\n            <Grid item xs={12} md={6} className={classes.padding2}>\r\n              <Typography gutterBottom variant=\"h6\">Account Info</Typography>\r\n              <TextField label=\"Name\" value={name} onChange={(e) => setName(e.target.value)} fullWidth />\r\n              <CopyToClipboard text={me} className={classes.margin2}>\r\n                <Button variant=\"contained\" color=\"primary\" fullWidth startIcon={<Assignment fontSize=\"large\" />}>\r\n                  Copy Your ID\r\n                </Button>\r\n              </CopyToClipboard>\r\n            </Grid>\r\n            <Grid item xs={12} md={6} className={classes.padding2}>\r\n              <Typography gutterBottom variant=\"h6\">Make a call</Typography>\r\n              <TextField label=\"ID to call\" value={idToCall} onChange={(e) => setIdToCall(e.target.value)} fullWidth />\r\n              {callAccepted && !callEnded ? (\r\n                <Button variant=\"contained\" color=\"secondary\" startIcon={<PhoneDisabled fontSize=\"large\" />} fullWidth onClick={leaveCall} className={classes.margin2}>\r\n                  Hang Up\r\n                </Button>\r\n              ) : (\r\n                <Button variant=\"contained\" color=\"primary\" startIcon={<Phone fontSize=\"large\" />} fullWidth onClick={() => callUser(idToCall)} className={classes.margin2}>\r\n                  Call\r\n                </Button>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      \r\n\t  \r\n\t\t{call.isReceivingCall && !callAccepted && !callEnded && (\r\n        <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n          <h1>{call.name} is calling:</h1>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n            Answer\r\n          </Button>\r\n        </div>\r\n      )}\r\n\r\n\r\n\t  </Paper>\r\n\t  \r\n\r\n    </Container>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t  </div>\r\n */}\r\n      </div>\r\n\r\n    )}\r\n  </div>\r\n  \r\n\r\n)\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default VideoCall"]},"metadata":{},"sourceType":"module"}