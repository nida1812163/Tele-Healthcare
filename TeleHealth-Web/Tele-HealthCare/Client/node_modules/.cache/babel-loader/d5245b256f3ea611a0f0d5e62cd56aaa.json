{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashar\\\\Desktop\\\\current tele\\\\Tele-Healthcare\\\\Tele-Healthcare\\\\Client\\\\src\\\\pages\\\\VideoCall.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from 'axios';\nimport '../App.css';\nimport Doctor from '../components/doctorDashboard';\nimport Button from \"@material-ui/core/Button\";\nimport { IconButton, TextField } from '@material-ui/core';\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Peer from \"peerjs\";\nimport io from \"socket.io-client\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3001\"); // This will generate the user ID dynamically\n\nconst myPeer = new Peer(undefined, {\n  host: '/',\n  port: '5000'\n});\n\nfunction VideoCall() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [stream, setStream] = useState();\n  const myVideo = useRef();\n  const [video_id, setVideoId] = useState(useParams().video_id); //   alert(video_id)\n  // \t  const myVideo = document.createElement('video')\n  // \t  myVideo.muted = true\n\n  const peers = {};\n  useEffect(_s(() => {\n    _s();\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n      myVideo.current.srcObject = stream;\n      addVideoStream(myVideo, stream);\n      myPeer.on('call', call => {\n        alert('dd');\n        call.answer(stream);\n        const video = document.createElement('video'); // event for the user to send their stream to us\n\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream);\n        });\n      });\n      socket.on('user-connected', userId => {\n        // alert(userId)\n        // console.log(userId)\n        setTimeout(connectToNewUser, 1000, userId, stream);\n      });\n    }, []);\n    const [render, setRender] = useState(true);\n\n    const getDoctorID = () => {\n      Axios.get('http://localhost:3001/Doctor_ID').then(res => {\n        // setList(res.data)\n        var string = JSON.stringify(res.data);\n        var json = JSON.parse(string); // alert(string)\n        // alert(json.doctor_id);\n\n        if (json.doctor_id === 0) {\n          setRender(false);\n          window.location = '/';\n          alert(\"You Need To Sign In First!!!\");\n        } // else{\n        //   setRender(true)\n        // }\n\n      });\n    };\n\n    getDoctorID(); // \t  const [video_id,setVideoId]=useState(useParams().video_id)\n    // \t  //   alert(video_id)\n    // // \t  const myVideo = document.createElement('video')\n    // // \t  myVideo.muted = true\n    // \t  const peers = {}\n    // \t  navigator.mediaDevices.getUserMedia({\n    // \t\t  video: true,\n    // \t\t  audio: true\n    // \t  }).then((stream)=>{ // stream is gonna be video and audio\n\n    addVideoStream(myVideo, stream); // setStream(stream)\n\n    myPeer.on('call', call => {\n      alert('dd');\n      call.answer(stream);\n      const video = document.createElement('video'); // event for the user to send their stream to us\n\n      call.on('stream', userVideoStream => {\n        addVideoStream(video, userVideoStream);\n      });\n    });\n    socket.on('user-connected', userId => {\n      // alert(userId)\n      // console.log(userId)\n      // connectToNewUser(userId, stream)\n      setTimeout(connectToNewUser, 1000, userId, stream);\n    });\n  }, \"rk8td8c7SqkJnYNm2MPUOvt/9EA=\"));\n  socket.on('user-disconnected', userId => {\n    console.log('user: ' + userId);\n\n    if (peers[userId]) {\n      peers[userId].close();\n    }\n  });\n  myPeer.on('open', id => {\n    // Send an event to the server\n    socket.emit('join-room', video_id, id);\n  });\n\n  function addVideoStream(video, stream) {\n    video.srcObject = stream; // video.play()\n    // loading stream \n\n    video.addEventListener('loadedmetadata', () => {\n      video.play(); // play video\n    });\n    const videoGrid = document.getElementById('video-grid'); // videoGrid.append(video)\n\n    setStream(video);\n  }\n\n  function connectToNewUser(userId, stream) {\n    const call = myPeer.call(userId, stream); // calling the user and sending our stream\n\n    const video = document.createElement('video'); // event for the user to send their stream to us\n\n    call.on('stream', userVideoStream => {\n      addVideoStream(video, userVideoStream);\n    });\n    call.on('close', () => {\n      video.remove();\n    });\n    peers[userId] = call;\n  }\n\n  const kk = () => {\n    var tble = document.getElementById('table');\n    var row = tble.rows;\n    row[2].deleteCell(0);\n    alert(row.length);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: render && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\",\n          color: '#fff'\n        },\n        children: \"Zoomish\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video\",\n            children: stream && /*#__PURE__*/_jsxDEV(\"video\", {\n              playsInline: true,\n              muted: true,\n              ref: myVideo,\n              autoPlay: true,\n              style: {\n                width: \"300px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(VideoCall, \"0FmF58teGL8HISBLaJ41H/3OZJk=\", false, function () {\n  return [useParams];\n});\n\n_c = VideoCall;\nexport default VideoCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"sources":["C:/Users/ashar/Desktop/current tele/Tele-Healthcare/Tele-Healthcare/Client/src/pages/VideoCall.js"],"names":["React","useEffect","useRef","useState","Axios","Doctor","Button","IconButton","TextField","AssignmentIcon","PhoneIcon","CopyToClipboard","Peer","io","useParams","socket","myPeer","undefined","host","port","VideoCall","stream","setStream","myVideo","video_id","setVideoId","peers","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","addVideoStream","on","call","alert","answer","document","createElement","userVideoStream","userId","setTimeout","connectToNewUser","render","setRender","getDoctorID","get","res","string","JSON","stringify","data","json","parse","doctor_id","window","location","console","log","close","id","emit","addEventListener","play","videoGrid","getElementById","remove","kk","tble","row","rows","deleteCell","length","textAlign","color","width"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAOC,KAAP,MAAiB,OAAjB;AACA,OAAO,YAAP;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,mBAAtC;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AAKA,MAAMC,MAAM,GAAGF,EAAE,CAAC,uBAAD,CAAjB,C,CAIE;;AACD,MAAMG,MAAM,GAAG,IAAIJ,IAAJ,CAASK,SAAT,EAAoB;AAClCC,EAAAA,IAAI,EAAE,GAD4B;AAElCC,EAAAA,IAAI,EAAE;AAF4B,CAApB,CAAf;;AAWD,SAASC,SAAT,GAAqB;AAAA;;AAAA;;AAGpB,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwBnB,QAAQ,EAAtC;AACA,QAAMoB,OAAO,GAAGrB,MAAM,EAAtB;AAIA,QAAM,CAACsB,QAAD,EAAUC,UAAV,IAAsBtB,QAAQ,CAACW,SAAS,GAAGU,QAAb,CAApC,CARoB,CAUpB;AAGD;AACA;;AAGC,QAAME,KAAK,GAAG,EAAd;AAMAzB,EAAAA,SAAS,IAAC,MAAM;AAAA;;AACf0B,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAApC,EAAkEC,IAAlE,CAAwEX,MAAD,IAAY;AAClFC,MAAAA,SAAS,CAACD,MAAD,CAAT;AACCE,MAAAA,OAAO,CAACU,OAAR,CAAgBC,SAAhB,GAA4Bb,MAA5B;AAGCc,MAAAA,cAAc,CAACZ,OAAD,EAAUF,MAAV,CAAd;AAIHL,MAAAA,MAAM,CAACoB,EAAP,CAAU,MAAV,EAAmBC,IAAD,IAAQ;AAEzBC,QAAAA,KAAK,CAAC,IAAD,CAAL;AAEAD,QAAAA,IAAI,CAACE,MAAL,CAAYlB,MAAZ;AAEE,cAAMS,KAAK,GAAGU,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd,CANuB,CASzB;;AACAJ,QAAAA,IAAI,CAACD,EAAL,CAAQ,QAAR,EAAmBM,eAAD,IAAmB;AACpCP,UAAAA,cAAc,CAACL,KAAD,EAAQY,eAAR,CAAd;AACA,SAFD;AAIE,OAdH;AAkBE3B,MAAAA,MAAM,CAACqB,EAAP,CAAU,gBAAV,EAA6BO,MAAD,IAAU;AACvC;AACA;AAEAC,QAAAA,UAAU,CAACC,gBAAD,EAAkB,IAAlB,EAAuBF,MAAvB,EAA8BtB,MAA9B,CAAV;AACA,OALC;AAOF,KAlCA,EAkCE,EAlCF;AA2CE,UAAM,CAACyB,MAAD,EAASC,SAAT,IAAsB5C,QAAQ,CAAC,IAAD,CAApC;;AAEA,UAAM6C,WAAW,GAAG,MAAI;AAEpB5C,MAAAA,KAAK,CAAC6C,GAAN,CAAU,iCAAV,EAA6CjB,IAA7C,CAAkDkB,GAAG,IAAI;AAEzD;AAGA,YAAIC,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAeH,GAAG,CAACI,IAAnB,CAAb;AAEA,YAAIC,IAAI,GAAGH,IAAI,CAACI,KAAL,CAAWL,MAAX,CAAX,CAPyD,CAS3D;AACE;;AAGA,YAAGI,IAAI,CAACE,SAAL,KAAmB,CAAtB,EAAwB;AACtBV,UAAAA,SAAS,CAAC,KAAD,CAAT;AACAW,UAAAA,MAAM,CAACC,QAAP,GAAgB,GAAhB;AACArB,UAAAA,KAAK,CAAC,8BAAD,CAAL;AACD,SAjBwD,CAmBzD;AACA;AACA;;AACK,OAtBL;AAwBD,KA1BH;;AA4BEU,IAAAA,WAAW,GA1EA,CA8EjB;AAEA;AAGA;AACA;AAGA;AAKA;AACA;AACA;AACA;;AAOCb,IAAAA,cAAc,CAACZ,OAAD,EAAUF,MAAV,CAAd,CAtGgB,CAyGf;;AAQAL,IAAAA,MAAM,CAACoB,EAAP,CAAU,MAAV,EAAmBC,IAAD,IAAQ;AAEzBC,MAAAA,KAAK,CAAC,IAAD,CAAL;AAEAD,MAAAA,IAAI,CAACE,MAAL,CAAYlB,MAAZ;AAEE,YAAMS,KAAK,GAAGU,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd,CANuB,CASzB;;AACAJ,MAAAA,IAAI,CAACD,EAAL,CAAQ,QAAR,EAAmBM,eAAD,IAAmB;AACpCP,QAAAA,cAAc,CAACL,KAAD,EAAQY,eAAR,CAAd;AACA,OAFD;AAIE,KAdH;AAkBE3B,IAAAA,MAAM,CAACqB,EAAP,CAAU,gBAAV,EAA6BO,MAAD,IAAU;AACvC;AACA;AAEA;AAEAC,MAAAA,UAAU,CAACC,gBAAD,EAAkB,IAAlB,EAAuBF,MAAvB,EAA8BtB,MAA9B,CAAV;AACA,KAPC;AAWA,GA9IM,kCAAT;AAqJEN,EAAAA,MAAM,CAACqB,EAAP,CAAU,mBAAV,EAAgCO,MAAD,IAAU;AAE1CiB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWlB,MAAvB;;AAEA,QAAGjB,KAAK,CAACiB,MAAD,CAAR,EAAiB;AACdjB,MAAAA,KAAK,CAACiB,MAAD,CAAL,CAAcmB,KAAd;AACA;AACD,GAPD;AAUA9C,EAAAA,MAAM,CAACoB,EAAP,CAAU,MAAV,EAAmB2B,EAAD,IAAM;AAEzB;AACAhD,IAAAA,MAAM,CAACiD,IAAP,CAAY,WAAZ,EAAyBxC,QAAzB,EAAmCuC,EAAnC;AAEA,GALC;;AAUC,WAAS5B,cAAT,CAAwBL,KAAxB,EAA+BT,MAA/B,EAAsC;AAGxCS,IAAAA,KAAK,CAACI,SAAN,GAAkBb,MAAlB,CAHwC,CAKxC;AAEA;;AACAS,IAAAA,KAAK,CAACmC,gBAAN,CAAuB,gBAAvB,EAAyC,MAAI;AAC5CnC,MAAAA,KAAK,CAACoC,IAAN,GAD4C,CAC/B;AACb,KAFD;AAMA,UAAMC,SAAS,GAAG3B,QAAQ,CAAC4B,cAAT,CAAwB,YAAxB,CAAlB,CAdwC,CAgBxC;;AAEA9C,IAAAA,SAAS,CAACQ,KAAD,CAAT;AAGA;;AAID,WAASe,gBAAT,CAA0BF,MAA1B,EAAkCtB,MAAlC,EAAyC;AAGxC,UAAMgB,IAAI,GAAGrB,MAAM,CAACqB,IAAP,CAAYM,MAAZ,EAAoBtB,MAApB,CAAb,CAHwC,CAGC;;AAEzC,UAAMS,KAAK,GAAGU,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd,CALwC,CAOxC;;AACAJ,IAAAA,IAAI,CAACD,EAAL,CAAQ,QAAR,EAAmBM,eAAD,IAAmB;AACpCP,MAAAA,cAAc,CAACL,KAAD,EAAQY,eAAR,CAAd;AACA,KAFD;AAIAL,IAAAA,IAAI,CAACD,EAAL,CAAQ,OAAR,EAAiB,MAAI;AACpBN,MAAAA,KAAK,CAACuC,MAAN;AACA,KAFD;AAKA3C,IAAAA,KAAK,CAACiB,MAAD,CAAL,GAAgBN,IAAhB;AAEA;;AAIF,QAAMiC,EAAE,GAAE,MAAI;AACb,QAAIC,IAAI,GAAG/B,QAAQ,CAAC4B,cAAT,CAAwB,OAAxB,CAAX;AACW,QAAII,GAAG,GAAGD,IAAI,CAACE,IAAf;AAETD,IAAAA,GAAG,CAAC,CAAD,CAAH,CAAOE,UAAP,CAAkB,CAAlB;AAGApC,IAAAA,KAAK,CAACkC,GAAG,CAACG,MAAL,CAAL;AAEF,GATD;;AAcA,sBAGI;AAAA,cACC7B,MAAM,iBACT;AAAA,8BAGA;AAAI,QAAA,KAAK,EAAE;AAAE8B,UAAAA,SAAS,EAAE,QAAb;AAAuBC,UAAAA,KAAK,EAAE;AAA9B,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA,eAIA;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BACC;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,iCACC;AAAK,YAAA,SAAS,EAAC,OAAf;AAAA,sBACExD,MAAM,iBAAK;AAAO,cAAA,WAAW,MAAlB;AAAmB,cAAA,KAAK,MAAxB;AAAyB,cAAA,GAAG,EAAEE,OAA9B;AAAuC,cAAA,QAAQ,MAA/C;AAAgD,cAAA,KAAK,EAAE;AAAEuD,gBAAAA,KAAK,EAAE;AAAT;AAAvD;AAAA;AAAA;AAAA;AAAA;AADb;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFE;AAAA;AAAA;AAAA;AAAA,UAHJ;AA+FC;;IA7VQ1D,S;UAQ6BN,S;;;KAR7BM,S;AA+VT,eAAeA,SAAf","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport Axios from'axios';\r\nimport '../App.css'\r\nimport Doctor from '../components/doctorDashboard'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\r\nimport PhoneIcon from \"@material-ui/icons/Phone\"\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\nimport Peer from \"peerjs\"\r\nimport io from \"socket.io-client\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nconst socket = io(\"http://localhost:3001\")\r\n\r\n\r\n\r\n\t\t// This will generate the user ID dynamically\r\n\tconst myPeer = new Peer(undefined, {\r\n\t\thost: '/',\r\n\t\tport: '5000'\r\n\t})\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n\r\nfunction VideoCall() {\r\n\r\n\r\n\tconst [ stream, setStream ] = useState()\r\n\tconst myVideo = useRef()\r\n\t\r\n\r\n\r\n\tconst [video_id,setVideoId]=useState(useParams().video_id)\r\n\t  \r\n\t//   alert(video_id)\r\n\t\r\n\r\n// \t  const myVideo = document.createElement('video')\r\n// \t  myVideo.muted = true\r\n\r\n\r\n\tconst peers = {}\r\n\r\n\r\n\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n\t\t\tsetStream(stream)\r\n\t\t\t\tmyVideo.current.srcObject = stream\r\n\r\n\r\n\t\t\t\t\taddVideoStream(myVideo, stream)\r\n\r\n\r\n\r\n\t\tmyPeer.on('call', (call)=>{\r\n\r\n\t\t\talert('dd')\r\n\t\t\t\r\n\t\t\tcall.answer(stream)\r\n\t\t\t  \r\n\t\t\t  const video = document.createElement('video')\r\n\t\r\n\t\r\n\t\t\t// event for the user to send their stream to us\r\n\t\t\tcall.on('stream', (userVideoStream)=>{\r\n\t\t\t\taddVideoStream(video, userVideoStream)\r\n\t\t\t})\r\n\t\r\n\t\t  })\r\n\r\n\t\t  \r\n\r\n\t\t  socket.on('user-connected', (userId)=>{\r\n\t\t\t// alert(userId)\r\n\t\t\t// console.log(userId)\r\n\r\n\t\t\tsetTimeout(connectToNewUser,1000,userId,stream)\r\n\t\t})\r\n\r\n\t}, [])\r\n\r\n\t\r\n    \r\n\r\n\r\n\r\n\r\n        \r\n    const [render, setRender] = useState(true)\r\n\r\n    const getDoctorID = ()=>{\r\n      \r\n        Axios.get('http://localhost:3001/Doctor_ID').then(res => {\r\n                  \r\n        // setList(res.data)\r\n        \r\n      \r\n        var string = JSON.stringify(res.data)\r\n            \r\n        var json = JSON.parse(string)\r\n      \r\n      // alert(string)\r\n        // alert(json.doctor_id);\r\n\r\n\r\n        if(json.doctor_id === 0){\r\n          setRender(false)\r\n          window.location='/'\r\n          alert(\"You Need To Sign In First!!!\")\r\n        }\r\n        \r\n        // else{\r\n        //   setRender(true)\r\n        // }\r\n            })\r\n      \r\n      }\r\n      \r\n      getDoctorID()\r\n      \r\n\r\n\r\n// \t  const [video_id,setVideoId]=useState(useParams().video_id)\r\n\t  \r\n// \t  //   alert(video_id)\r\n\t  \r\n\r\n// // \t  const myVideo = document.createElement('video')\r\n// // \t  myVideo.muted = true\r\n  \r\n\r\n// \t  const peers = {}\r\n  \r\n\r\n\r\n\r\n// \t  navigator.mediaDevices.getUserMedia({\r\n// \t\t  video: true,\r\n// \t\t  audio: true\r\n// \t  }).then((stream)=>{ // stream is gonna be video and audio\r\n\r\n\r\n  \r\n\r\n\t\r\n\t\r\n\taddVideoStream(myVideo, stream)\r\n\r\n\r\n\t\t// setStream(stream)\r\n\r\n\t\t\r\n\r\n\t\t\r\n\r\n\r\n\r\n\t\tmyPeer.on('call', (call)=>{\r\n\r\n\t\t\talert('dd')\r\n\t\t\t\r\n\t\t\tcall.answer(stream)\r\n\t\t\t  \r\n\t\t\t  const video = document.createElement('video')\r\n\t\r\n\t\r\n\t\t\t// event for the user to send their stream to us\r\n\t\t\tcall.on('stream', (userVideoStream)=>{\r\n\t\t\t\taddVideoStream(video, userVideoStream)\r\n\t\t\t})\r\n\t\r\n\t\t  })\r\n\r\n\t\t  \r\n\r\n\t\t  socket.on('user-connected', (userId)=>{\r\n\t\t\t// alert(userId)\r\n\t\t\t// console.log(userId)\r\n\r\n\t\t\t// connectToNewUser(userId, stream)\r\n\r\n\t\t\tsetTimeout(connectToNewUser,1000,userId,stream)\r\n\t\t})\t\r\n\t\r\n\r\n\t\t\r\n\t  })\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\t  socket.on('user-disconnected', (userId)=>{\r\n\t\t\r\n\t\tconsole.log('user: ' + userId)\r\n\t\t\r\n\t\tif(peers[userId]){\r\n\t\t\t  peers[userId].close()\r\n\t\t  }\r\n\t  })\r\n\r\n\r\n\t  myPeer.on('open', (id)=>{\t\t\r\n\r\n\t\t// Send an event to the server\r\n\t\tsocket.emit('join-room', video_id, id)\r\n\t\r\n\t})\r\n\t\r\n\t\r\n\r\n\r\n    function addVideoStream(video, stream){\r\n\r\n\t\r\n\t\tvideo.srcObject = stream\r\n\r\n\t\t// video.play()\r\n\t\t\r\n\t\t// loading stream \r\n\t\tvideo.addEventListener('loadedmetadata', ()=>{\r\n\t\t\tvideo.play() // play video\r\n\t\t})\r\n\r\n\r\n\t\t\r\n\t\tconst videoGrid = document.getElementById('video-grid')\r\n\t\t\r\n\t\t// videoGrid.append(video)\r\n\t\t\r\n\t\tsetStream(video)\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction connectToNewUser(userId, stream){\r\n\r\n\t\t\r\n\t\tconst call = myPeer.call(userId, stream) // calling the user and sending our stream\r\n\t\t\r\n\t\tconst video = document.createElement('video')\r\n\r\n\t\t// event for the user to send their stream to us\r\n\t\tcall.on('stream', (userVideoStream)=>{\r\n\t\t\taddVideoStream(video, userVideoStream)\r\n\t\t})\r\n\r\n\t\tcall.on('close', ()=>{\r\n\t\t\tvideo.remove()\r\n\t\t})\r\n\r\n\r\n\t\tpeers[userId] = call\r\n\r\n\t}\r\n\r\n\r\n\r\nconst kk= ()=>{\r\n\tvar tble = document.getElementById('table');\r\n            var row = tble.rows\r\n\r\n\t\t\trow[2].deleteCell(0)\r\n\r\n\t\t\t\r\n\t\t\talert(row.length)\r\n\r\n}\r\n\r\n\r\n\r\n\r\nreturn(\r\n\r\n    \r\n    <div>\r\n    {render && (\r\n\t\t<div>\r\n\t\t\r\n\r\n\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"video-container\">\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t  {/* <script src='/VideoCall.js'></script> */}\r\n      \r\n\t  \r\n\t  {/* <Doctor/> */}\r\n\r\n\r\n\r\n{/* \r\n      <>\r\n\t\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"video-container\">\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{callAccepted && !callEnded ?\r\n\t\t\t\t\t<video playsInline ref={userVideo} autoPlay style={{ width: \"300px\"}} />:\r\n\t\t\t\t\tnull}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"myId\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\tstyle={{ marginBottom: \"20px\" }}\r\n\t\t\t\t/>\r\n\t\t\t\t<CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\r\n\t\t\t\t\t\tCopy ID\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</CopyToClipboard>\r\n\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"ID to call\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={idToCall}\r\n\t\t\t\t\tonChange={(e) => setIdToCall(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"call-button\">\r\n\t\t\t\t\t{callAccepted && !callEnded ? (\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n\t\t\t\t\t\t\tEnd Call\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n\t\t\t\t\t\t\t<PhoneIcon fontSize=\"large\" />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{idToCall}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{receivingCall && !callAccepted ? (\r\n\t\t\t\t\t\t<div className=\"caller\">\r\n\t\t\t\t\t\t<h1 >{name} is calling...</h1>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n\t\t\t\t\t\t\tAnswer\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</> */}\r\n    \r\n        \r\n      </div>\r\n\r\n    )}\r\n  </div>\r\n  \r\n\r\n)\r\n\r\n\r\n}\r\n\r\nexport default VideoCall"]},"metadata":{},"sourceType":"module"}