{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashar\\\\Desktop\\\\current tele\\\\Tele-Healthcare\\\\Tele-Healthcare\\\\Client\\\\src\\\\pages\\\\VideoCall.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from 'axios';\nimport '../App.css';\nimport Doctor from '../components/doctorDashboard';\nimport Button from \"@material-ui/core/Button\";\nimport { IconButton, TextField } from '@material-ui/core';\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Peer from \"peerjs\";\nimport io from \"socket.io-client\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3001\"); // This will generate the user ID dynamically\n\nconst myPeer = new Peer(undefined, {\n  host: '/',\n  port: '5000'\n});\n\nfunction VideoCall() {\n  _s();\n\n  // const [ me, setMe ] = useState(\"\")\n  // const [ stream, setStream ] = useState()\n  // const [ receivingCall, setReceivingCall ] = useState(false)\n  // const [ caller, setCaller ] = useState(\"\")\n  // const [ callerSignal, setCallerSignal ] = useState()\n  // const [ callAccepted, setCallAccepted ] = useState(false)\n  // const [ idToCall, setIdToCall ] = useState(\"\")\n  // const [ callEnded, setCallEnded] = useState(false)\n  // const [ name, setName ] = useState(\"\")\n  // const myVideo = useRef()\n  // const userVideo = useRef()\n  // const connectionRef= useRef()\n  // useEffect(() => {\n  // \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\n  // \t\tsetStream(stream)\n  // \t\t\tmyVideo.current.srcObject = stream\n  // \t})\n  // socket.on(\"me\", (id) => {\n  // \t\tsetMe(id)\n  // \t})\n  // \tsocket.on(\"callUser\", (data) => {\n  // \t\tsetReceivingCall(true)\n  // \t\tsetCaller(data.from)\n  // \t\tsetName(data.name)\n  // \t\tsetCallerSignal(data.signal)\n  // \t})\n  // }, [])\n  // const callUser = (id) => {\n  // \tconst peer = new Peer({\n  // \t\tinitiator: true,\n  // \t\ttrickle: false,\n  // \t\tstream: stream\n  // \t})\n  // \tpeer.on(\"signal\", (data) => {\n  // \t\tsocket.emit(\"callUser\", {\n  // \t\t\tuserToCall: id,\n  // \t\t\tsignalData: data,\n  // \t\t\tfrom: me,\n  // \t\t\tname: name\n  // \t\t})\n  // \t})\n  // \tpeer.on(\"stream\", (stream) => {\n  // \t\t\tuserVideo.current.srcObject = stream\n  // \t})\n  // \tsocket.on(\"callAccepted\", (signal) => {\n  // \t\tsetCallAccepted(true)\n  // \t\tpeer.signal(signal)\n  // \t})\n  // \tconnectionRef.current = peer\n  // }\n  // const answerCall =() =>  {\n  // \tsetCallAccepted(true)\n  // \tconst peer = new Peer({\n  // \t\tinitiator: false,\n  // \t\ttrickle: false,\n  // \t\tstream: stream\n  // \t})\n  // \tpeer.on(\"signal\", (data) => {\n  // \t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\n  // \t})\n  // \tpeer.on(\"stream\", (stream) => {\n  // \t\tuserVideo.current.srcObject = stream\n  // \t})\n  // \tpeer.signal(callerSignal)\n  // \tconnectionRef.current = peer\n  // }\n  // const leaveCall = () => {\n  // \tsetCallEnded(true)\n  // \tconnectionRef.current.destroy()\n  // }\n  const [render, setRender] = useState(true);\n\n  const getDoctorID = () => {\n    Axios.get('http://localhost:3001/Doctor_ID').then(res => {\n      // setList(res.data)\n      var string = JSON.stringify(res.data);\n      var json = JSON.parse(string); // alert(string)\n      // alert(json.doctor_id);\n\n      if (json.doctor_id === 0) {\n        setRender(false);\n        window.location = '/';\n        alert(\"You Need To Sign In First!!!\");\n      } // else{\n      //   setRender(true)\n      // }\n\n    });\n  };\n\n  getDoctorID(); //   const [video_id,setVideoId]=useState(useParams().video_id)\n  //   //   alert(video_id)\n  //   const [stream, setStream] = useState()\n  // //   const videoGrid = document.getElementById('video-grid')\n  //   const myVideo = document.createElement('video')\n  //   myVideo.muted = true\n  //   const peers = {}\n  //   navigator.mediaDevices.getUserMedia({\n  // \t  video: true,\n  // \t  audio: true\n  //   }).then((stream)=>{ // stream is gonna be video and audio\n  // addVideoStream(myVideo, stream)\n  // \t// setStream(stream)\n  // \tmyPeer.on('call', (call)=>{\n  // \t\talert('dd')\n  // \t\tcall.answer(stream)\n  // \t\t  const video = document.createElement('video')\n  // \t\t// event for the user to send their stream to us\n  // \t\tcall.on('stream', (userVideoStream)=>{\n  // \t\t\taddVideoStream(video, userVideoStream)\n  // \t\t})\n  // \t  })\n  // \t  socket.on('user-connected', (userId)=>{\n  // \t\t// alert(userId)\n  // \t\t// console.log(userId)\n  // \t\t// connectToNewUser(userId, stream)\n  // \t\tsetTimeout(connectToNewUser,1000,userId,stream)\n  // \t})\t\n  //   })\n  //   socket.on('user-disconnected', (userId)=>{\n  // \tconsole.log('user: ' + userId)\n  // \tif(peers[userId]){\n  // \t\t  peers[userId].close()\n  // \t  }\n  //   })\n  //   myPeer.on('open', (id)=>{\t\t\n  // \t// Send an event to the server\n  // \tsocket.emit('join-room', video_id, id)\n  // })\n  // function addVideoStream(video, stream){\n  // \tvideo.srcObject = stream\n  // \t// video.play()\n  // \t// loading stream \n  // \tvideo.addEventListener('loadedmetadata', ()=>{\n  // \t\tvideo.play() // play video\n  // \t})\n  // \tconst videoGrid = document.getElementById('video-grid')\n  // \tvideoGrid.append(video)\n  // }\n\n  function connectToNewUser(userId, stream) {// const call = myPeer.call(userId, stream) // calling the user and sending our stream\n    // const video = document.createElement('video')\n    // // event for the user to send their stream to us\n    // call.on('stream', (userVideoStream)=>{\n    // \taddVideoStream(video, userVideoStream)\n    // })\n    // call.on('close', ()=>{\n    // \tvideo.remove()\n    // })\n    // peers[userId] = call\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: render && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        id: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"colgroup\", {\n          children: [/*#__PURE__*/_jsxDEV(\"col\", {\n            id: \"myCol\",\n            span: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"col\", {\n            style: \"background-color:green\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"S.No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Geek_id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Geek_1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"GeekForGeeks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Geek_id_1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Geek_2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"GeeksForGeeks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Geek_id_2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoCall, \"rk8td8c7SqkJnYNm2MPUOvt/9EA=\");\n\n_c = VideoCall;\nexport default VideoCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"sources":["C:/Users/ashar/Desktop/current tele/Tele-Healthcare/Tele-Healthcare/Client/src/pages/VideoCall.js"],"names":["React","useEffect","useRef","useState","Axios","Doctor","Button","IconButton","TextField","AssignmentIcon","PhoneIcon","CopyToClipboard","Peer","io","useParams","socket","myPeer","undefined","host","port","VideoCall","render","setRender","getDoctorID","get","then","res","string","JSON","stringify","data","json","parse","doctor_id","window","location","alert","connectToNewUser","userId","stream"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport Axios from'axios';\r\nimport '../App.css'\r\nimport Doctor from '../components/doctorDashboard'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\r\nimport PhoneIcon from \"@material-ui/icons/Phone\"\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\nimport Peer from \"peerjs\"\r\nimport io from \"socket.io-client\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nconst socket = io(\"http://localhost:3001\")\r\n\r\n\r\n\r\n\t\t// This will generate the user ID dynamically\r\n\tconst myPeer = new Peer(undefined, {\r\n\t\thost: '/',\r\n\t\tport: '5000'\r\n\t})\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n\r\nfunction VideoCall() {\r\n\r\n\r\n    // const [ me, setMe ] = useState(\"\")\r\n\t// const [ stream, setStream ] = useState()\r\n\t// const [ receivingCall, setReceivingCall ] = useState(false)\r\n\t// const [ caller, setCaller ] = useState(\"\")\r\n\t// const [ callerSignal, setCallerSignal ] = useState()\r\n\t// const [ callAccepted, setCallAccepted ] = useState(false)\r\n\t// const [ idToCall, setIdToCall ] = useState(\"\")\r\n\t// const [ callEnded, setCallEnded] = useState(false)\r\n\t// const [ name, setName ] = useState(\"\")\r\n\t// const myVideo = useRef()\r\n\t// const userVideo = useRef()\r\n\t// const connectionRef= useRef()\r\n\r\n\t// useEffect(() => {\r\n\t// \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n\t// \t\tsetStream(stream)\r\n\t// \t\t\tmyVideo.current.srcObject = stream\r\n\t// \t})\r\n\r\n\t// socket.on(\"me\", (id) => {\r\n\t// \t\tsetMe(id)\r\n\t// \t})\r\n\r\n\t// \tsocket.on(\"callUser\", (data) => {\r\n\t// \t\tsetReceivingCall(true)\r\n\t// \t\tsetCaller(data.from)\r\n\t// \t\tsetName(data.name)\r\n\t// \t\tsetCallerSignal(data.signal)\r\n\t// \t})\r\n\t// }, [])\r\n\r\n\t// const callUser = (id) => {\r\n\t// \tconst peer = new Peer({\r\n\t// \t\tinitiator: true,\r\n\t// \t\ttrickle: false,\r\n\t// \t\tstream: stream\r\n\t// \t})\r\n\t// \tpeer.on(\"signal\", (data) => {\r\n\t// \t\tsocket.emit(\"callUser\", {\r\n\t// \t\t\tuserToCall: id,\r\n\t// \t\t\tsignalData: data,\r\n\t// \t\t\tfrom: me,\r\n\t// \t\t\tname: name\r\n\t// \t\t})\r\n\t// \t})\r\n\t// \tpeer.on(\"stream\", (stream) => {\r\n\t\t\t\r\n\t// \t\t\tuserVideo.current.srcObject = stream\r\n\t\t\t\r\n\t// \t})\r\n\t// \tsocket.on(\"callAccepted\", (signal) => {\r\n\t// \t\tsetCallAccepted(true)\r\n\t// \t\tpeer.signal(signal)\r\n\t// \t})\r\n\r\n\t// \tconnectionRef.current = peer\r\n\t// }\r\n\r\n\t// const answerCall =() =>  {\r\n\t// \tsetCallAccepted(true)\r\n\t// \tconst peer = new Peer({\r\n\t// \t\tinitiator: false,\r\n\t// \t\ttrickle: false,\r\n\t// \t\tstream: stream\r\n\t// \t})\r\n\t// \tpeer.on(\"signal\", (data) => {\r\n\t// \t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\r\n\t// \t})\r\n\t// \tpeer.on(\"stream\", (stream) => {\r\n\t// \t\tuserVideo.current.srcObject = stream\r\n\t// \t})\r\n\r\n\t// \tpeer.signal(callerSignal)\r\n\t// \tconnectionRef.current = peer\r\n\t// }\r\n\r\n\t// const leaveCall = () => {\r\n\t// \tsetCallEnded(true)\r\n\t// \tconnectionRef.current.destroy()\r\n\t// }\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n        \r\n    const [render, setRender] = useState(true)\r\n\r\n    const getDoctorID = ()=>{\r\n      \r\n        Axios.get('http://localhost:3001/Doctor_ID').then(res => {\r\n                  \r\n        // setList(res.data)\r\n        \r\n      \r\n        var string = JSON.stringify(res.data)\r\n            \r\n        var json = JSON.parse(string)\r\n      \r\n      // alert(string)\r\n        // alert(json.doctor_id);\r\n\r\n\r\n        if(json.doctor_id === 0){\r\n          setRender(false)\r\n          window.location='/'\r\n          alert(\"You Need To Sign In First!!!\")\r\n        }\r\n        \r\n        // else{\r\n        //   setRender(true)\r\n        // }\r\n            })\r\n      \r\n      }\r\n      \r\n      getDoctorID()\r\n      \r\n\r\n\r\n\t//   const [video_id,setVideoId]=useState(useParams().video_id)\r\n\t  \r\n\t//   //   alert(video_id)\r\n\t  \r\n\t//   const [stream, setStream] = useState()\r\n\r\n\r\n\t// //   const videoGrid = document.getElementById('video-grid')\r\n\r\n\r\n\t\t\r\n\r\n\r\n\r\n\t//   const myVideo = document.createElement('video')\r\n\t//   myVideo.muted = true\r\n  \r\n\r\n\t//   const peers = {}\r\n  \r\n\r\n\r\n\r\n\t//   navigator.mediaDevices.getUserMedia({\r\n\t// \t  video: true,\r\n\t// \t  audio: true\r\n\t//   }).then((stream)=>{ // stream is gonna be video and audio\r\n\r\n\r\n  \r\n\r\n\t\r\n\t\r\n\t// addVideoStream(myVideo, stream)\r\n\r\n\r\n\t// \t// setStream(stream)\r\n\r\n\t\t\r\n\r\n\t\t\r\n\r\n\r\n\r\n\t// \tmyPeer.on('call', (call)=>{\r\n\r\n\t// \t\talert('dd')\r\n\t\t\t\r\n\t// \t\tcall.answer(stream)\r\n\t\t\t  \r\n\t// \t\t  const video = document.createElement('video')\r\n\t\r\n\t\r\n\t// \t\t// event for the user to send their stream to us\r\n\t// \t\tcall.on('stream', (userVideoStream)=>{\r\n\t// \t\t\taddVideoStream(video, userVideoStream)\r\n\t// \t\t})\r\n\t\r\n\t// \t  })\r\n\r\n\t\t  \r\n\r\n\t// \t  socket.on('user-connected', (userId)=>{\r\n\t// \t\t// alert(userId)\r\n\t// \t\t// console.log(userId)\r\n\r\n\t// \t\t// connectToNewUser(userId, stream)\r\n\r\n\t// \t\tsetTimeout(connectToNewUser,1000,userId,stream)\r\n\t// \t})\t\r\n\t\r\n\r\n\t\t\r\n\t//   })\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\t//   socket.on('user-disconnected', (userId)=>{\r\n\t\t\r\n\t// \tconsole.log('user: ' + userId)\r\n\t\t\r\n\t// \tif(peers[userId]){\r\n\t// \t\t  peers[userId].close()\r\n\t// \t  }\r\n\t//   })\r\n\r\n\r\n\t//   myPeer.on('open', (id)=>{\t\t\r\n\r\n\t// \t// Send an event to the server\r\n\t// \tsocket.emit('join-room', video_id, id)\r\n\t\r\n\t// })\r\n\t\r\n\t\r\n\r\n\r\n    // function addVideoStream(video, stream){\r\n\r\n\t\r\n\t// \tvideo.srcObject = stream\r\n\r\n\t// \t// video.play()\r\n\t\t\r\n\t// \t// loading stream \r\n\t// \tvideo.addEventListener('loadedmetadata', ()=>{\r\n\t// \t\tvideo.play() // play video\r\n\t// \t})\r\n\r\n\r\n\t\t\r\n\t// \tconst videoGrid = document.getElementById('video-grid')\r\n\r\n\t// \tvideoGrid.append(video)\r\n\r\n\r\n\t// }\r\n\r\n\r\n\r\n\tfunction connectToNewUser(userId, stream){\r\n\r\n\t\t\r\n\t\t// const call = myPeer.call(userId, stream) // calling the user and sending our stream\r\n\t\t\r\n\t\t// const video = document.createElement('video')\r\n\r\n\t\t// // event for the user to send their stream to us\r\n\t\t// call.on('stream', (userVideoStream)=>{\r\n\t\t// \taddVideoStream(video, userVideoStream)\r\n\t\t// })\r\n\r\n\t\t// call.on('close', ()=>{\r\n\t\t// \tvideo.remove()\r\n\t\t// })\r\n\r\n\r\n\t\t// peers[userId] = call\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn(\r\n\r\n    \r\n    <div>\r\n    {render && (\r\n\t\t<div>\r\n\t\t\r\n\t\t\r\n\t\t  {/* <script src='/VideoCall.js'></script> */}\r\n      \r\n\t  \r\n\t  {/* <Doctor/> */}\r\n\r\n\t  {/* <div className='video-grid' id='video-grid'> */}\r\n{/* \t\t  \r\n\t  <table id=\"table\">\r\n        <colgroup>\r\n            <col id=\"myCol\" span=\"2\"/>\r\n            <col style=\"background-color:green\"/>\r\n        </colgroup>\r\n\r\n<tr>\r\n<p style={{visibility:'hidden'}}></p>\r\n\r\n</tr>\r\n\r\n<tr>\r\n<p style={{visibility:'visible', background:'red'}}></p>\r\n\r\n</tr>\r\n\t\t</table> */}\r\n<table id=\"table\">\r\n        <colgroup>\r\n            <col id=\"myCol\" span=\"2\"/>\r\n            <col style=\"background-color:green\"/>\r\n        </colgroup>\r\n  \r\n        <tr>\r\n            <th>S.No</th>\r\n            <th>Title</th>\r\n            <th>Geek_id</th>\r\n        </tr>\r\n        <tr>\r\n            <td>Geek_1</td>\r\n            <td>GeekForGeeks</td>\r\n            <th>Geek_id_1</th>\r\n        </tr>\r\n        <tr>\r\n            <td>Geek_2</td>\r\n            <td>GeeksForGeeks</td>\r\n            <th>Geek_id_2</th>\r\n        </tr>\r\n    </table>\r\n\t\t  \r\n\r\n\t  {/* </div> */}\r\n\r\n\r\n{/* \r\n      <>\r\n\t\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"video-container\">\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{callAccepted && !callEnded ?\r\n\t\t\t\t\t<video playsInline ref={userVideo} autoPlay style={{ width: \"300px\"}} />:\r\n\t\t\t\t\tnull}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"myId\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\tstyle={{ marginBottom: \"20px\" }}\r\n\t\t\t\t/>\r\n\t\t\t\t<CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\r\n\t\t\t\t\t\tCopy ID\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</CopyToClipboard>\r\n\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"ID to call\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={idToCall}\r\n\t\t\t\t\tonChange={(e) => setIdToCall(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"call-button\">\r\n\t\t\t\t\t{callAccepted && !callEnded ? (\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n\t\t\t\t\t\t\tEnd Call\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n\t\t\t\t\t\t\t<PhoneIcon fontSize=\"large\" />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{idToCall}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{receivingCall && !callAccepted ? (\r\n\t\t\t\t\t\t<div className=\"caller\">\r\n\t\t\t\t\t\t<h1 >{name} is calling...</h1>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n\t\t\t\t\t\t\tAnswer\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</> */}\r\n    \r\n        \r\n      </div>\r\n\r\n    )}\r\n  </div>\r\n  \r\n\r\n)\r\n\r\n\r\n}\r\n\r\nexport default VideoCall"]},"metadata":{},"sourceType":"module"}