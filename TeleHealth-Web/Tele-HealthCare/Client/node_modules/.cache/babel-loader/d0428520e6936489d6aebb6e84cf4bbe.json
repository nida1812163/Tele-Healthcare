{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashar\\\\Desktop\\\\current tele\\\\Tele-Healthcare\\\\Tele-Healthcare\\\\Client\\\\src\\\\pages\\\\VideoCall.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from 'axios';\nimport '../App.css';\nimport Doctor from '../components/doctorDashboard';\nimport Button from \"@material-ui/core/Button\";\nimport { IconButton, TextField } from '@material-ui/core';\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Peer from \"peerjs\";\nimport io from \"socket.io-client\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3001\"); // This will generate the user ID dynamically\n\nconst myPeer = new Peer(undefined, {\n  host: '/',\n  port: '5000'\n});\n\nfunction VideoCall() {\n  _s();\n\n  // const [ me, setMe ] = useState(\"\")\n  // const [ stream, setStream ] = useState()\n  // const [ receivingCall, setReceivingCall ] = useState(false)\n  // const [ caller, setCaller ] = useState(\"\")\n  // const [ callerSignal, setCallerSignal ] = useState()\n  // const [ callAccepted, setCallAccepted ] = useState(false)\n  // const [ idToCall, setIdToCall ] = useState(\"\")\n  // const [ callEnded, setCallEnded] = useState(false)\n  // const [ name, setName ] = useState(\"\")\n  // const myVideo = useRef()\n  // const userVideo = useRef()\n  // const connectionRef= useRef()\n  // useEffect(() => {\n  // \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\n  // \t\tsetStream(stream)\n  // \t\t\tmyVideo.current.srcObject = stream\n  // \t})\n  // socket.on(\"me\", (id) => {\n  // \t\tsetMe(id)\n  // \t})\n  // \tsocket.on(\"callUser\", (data) => {\n  // \t\tsetReceivingCall(true)\n  // \t\tsetCaller(data.from)\n  // \t\tsetName(data.name)\n  // \t\tsetCallerSignal(data.signal)\n  // \t})\n  // }, [])\n  // const callUser = (id) => {\n  // \tconst peer = new Peer({\n  // \t\tinitiator: true,\n  // \t\ttrickle: false,\n  // \t\tstream: stream\n  // \t})\n  // \tpeer.on(\"signal\", (data) => {\n  // \t\tsocket.emit(\"callUser\", {\n  // \t\t\tuserToCall: id,\n  // \t\t\tsignalData: data,\n  // \t\t\tfrom: me,\n  // \t\t\tname: name\n  // \t\t})\n  // \t})\n  // \tpeer.on(\"stream\", (stream) => {\n  // \t\t\tuserVideo.current.srcObject = stream\n  // \t})\n  // \tsocket.on(\"callAccepted\", (signal) => {\n  // \t\tsetCallAccepted(true)\n  // \t\tpeer.signal(signal)\n  // \t})\n  // \tconnectionRef.current = peer\n  // }\n  // const answerCall =() =>  {\n  // \tsetCallAccepted(true)\n  // \tconst peer = new Peer({\n  // \t\tinitiator: false,\n  // \t\ttrickle: false,\n  // \t\tstream: stream\n  // \t})\n  // \tpeer.on(\"signal\", (data) => {\n  // \t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\n  // \t})\n  // \tpeer.on(\"stream\", (stream) => {\n  // \t\tuserVideo.current.srcObject = stream\n  // \t})\n  // \tpeer.signal(callerSignal)\n  // \tconnectionRef.current = peer\n  // }\n  // const leaveCall = () => {\n  // \tsetCallEnded(true)\n  // \tconnectionRef.current.destroy()\n  // }\n  const [render, setRender] = useState(true);\n\n  const getDoctorID = () => {\n    Axios.get('http://localhost:3001/Doctor_ID').then(res => {\n      // setList(res.data)\n      var string = JSON.stringify(res.data);\n      var json = JSON.parse(string); // alert(string)\n      // alert(json.doctor_id);\n\n      if (json.doctor_id === 0) {\n        setRender(false);\n        window.location = '/';\n        alert(\"You Need To Sign In First!!!\");\n      } // else{\n      //   setRender(true)\n      // }\n\n    });\n  };\n\n  getDoctorID();\n  const [video_id, setVideoId] = useState(useParams().video_id); //   alert(video_id)\n\n  const [stream, setStream] = useState(); //   const videoGrid = document.getElementById('video-grid')\n\n  const myVideo = document.createElement('video');\n  myVideo.muted = true;\n  const peers = {};\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  }).then(stream => {\n    // stream is gonna be video and audio\n    addVideoStream(myVideo, stream); // setStream(stream)\n\n    myPeer.on('call', call => {\n      alert('dd');\n      call.answer(stream);\n      const video = document.createElement('video'); // event for the user to send their stream to us\n\n      call.on('stream', userVideoStream => {\n        addVideoStream(video, userVideoStream);\n      });\n    });\n    socket.on('user-connected', userId => {\n      // alert(userId)\n      // console.log(userId)\n      // connectToNewUser(userId, stream)\n      setTimeout(connectToNewUser, 1000, userId, stream);\n    });\n  });\n  socket.on('user-disconnected', userId => {\n    console.log('user: ' + userId);\n\n    if (peers[userId]) {\n      peers[userId].close();\n    }\n  });\n  myPeer.on('open', id => {\n    // Send an event to the server\n    socket.emit('join-room', video_id, id);\n  });\n\n  function addVideoStream(video, stream) {\n    video.srcObject = stream; // video.play()\n    // loading stream \n\n    video.addEventListener('loadedmetadata', () => {\n      video.play(); // play video\n    });\n    const videoGrid = document.getElementById('table');\n    videoGrid.append(video);\n  }\n\n  function connectToNewUser(userId, stream) {\n    const call = myPeer.call(userId, stream); // calling the user and sending our stream\n\n    const video = document.createElement('video'); // event for the user to send their stream to us\n\n    call.on('stream', userVideoStream => {\n      addVideoStream(video, userVideoStream);\n    });\n    call.on('close', () => {\n      video.remove();\n    });\n    peers[userId] = call;\n  }\n\n  const kk = () => {\n    var tble = document.getElementById('table');\n    var row = tble.rows; // row[1].deleteCell(1)\n\n    alert(row[0].cells.length);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: render && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-grid\",\n        id: \"video-grid\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"table\",\n          children: [/*#__PURE__*/_jsxDEV(\"colgroup\", {\n            children: /*#__PURE__*/_jsxDEV(\"col\", {\n              style: {\n                backgroundColor: \"green\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                visibility: 'visible',\n                background: 'red'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 1\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: kk,\n              children: \"Click here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 1\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoCall, \"1kjUh3E+aUhOdOU/7OVArwwNL0o=\", false, function () {\n  return [useParams];\n});\n\n_c = VideoCall;\nexport default VideoCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"sources":["C:/Users/ashar/Desktop/current tele/Tele-Healthcare/Tele-Healthcare/Client/src/pages/VideoCall.js"],"names":["React","useEffect","useRef","useState","Axios","Doctor","Button","IconButton","TextField","AssignmentIcon","PhoneIcon","CopyToClipboard","Peer","io","useParams","socket","myPeer","undefined","host","port","VideoCall","render","setRender","getDoctorID","get","then","res","string","JSON","stringify","data","json","parse","doctor_id","window","location","alert","video_id","setVideoId","stream","setStream","myVideo","document","createElement","muted","peers","navigator","mediaDevices","getUserMedia","video","audio","addVideoStream","on","call","answer","userVideoStream","userId","setTimeout","connectToNewUser","console","log","close","id","emit","srcObject","addEventListener","play","videoGrid","getElementById","append","remove","kk","tble","row","rows","cells","length","backgroundColor","visibility","background"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAOC,KAAP,MAAiB,OAAjB;AACA,OAAO,YAAP;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,mBAAtC;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AAKA,MAAMC,MAAM,GAAGF,EAAE,CAAC,uBAAD,CAAjB,C,CAIE;;AACD,MAAMG,MAAM,GAAG,IAAIJ,IAAJ,CAASK,SAAT,EAAoB;AAClCC,EAAAA,IAAI,EAAE,GAD4B;AAElCC,EAAAA,IAAI,EAAE;AAF4B,CAApB,CAAf;;AAWD,SAASC,SAAT,GAAqB;AAAA;;AAGjB;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQG,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,IAAD,CAApC;;AAEA,QAAMoB,WAAW,GAAG,MAAI;AAEpBnB,IAAAA,KAAK,CAACoB,GAAN,CAAU,iCAAV,EAA6CC,IAA7C,CAAkDC,GAAG,IAAI;AAEzD;AAGA,UAAIC,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAeH,GAAG,CAACI,IAAnB,CAAb;AAEA,UAAIC,IAAI,GAAGH,IAAI,CAACI,KAAL,CAAWL,MAAX,CAAX,CAPyD,CAS3D;AACE;;AAGA,UAAGI,IAAI,CAACE,SAAL,KAAmB,CAAtB,EAAwB;AACtBX,QAAAA,SAAS,CAAC,KAAD,CAAT;AACAY,QAAAA,MAAM,CAACC,QAAP,GAAgB,GAAhB;AACAC,QAAAA,KAAK,CAAC,8BAAD,CAAL;AACD,OAjBwD,CAmBzD;AACA;AACA;;AACK,KAtBL;AAwBD,GA1BH;;AA4BEb,EAAAA,WAAW;AAId,QAAM,CAACc,QAAD,EAAUC,UAAV,IAAsBnC,QAAQ,CAACW,SAAS,GAAGuB,QAAb,CAApC,CA5HkB,CA8HlB;;AAEA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBrC,QAAQ,EAApC,CAhIkB,CAmIpB;;AAOE,QAAMsC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAhB;AACAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,IAAhB;AAGA,QAAMC,KAAK,GAAG,EAAd;AAKAC,EAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACnCC,IAAAA,KAAK,EAAE,IAD4B;AAEnCC,IAAAA,KAAK,EAAE;AAF4B,GAApC,EAGGzB,IAHH,CAGSc,MAAD,IAAU;AAAE;AAOtBY,IAAAA,cAAc,CAACV,OAAD,EAAUF,MAAV,CAAd,CAPoB,CAUnB;;AAQAvB,IAAAA,MAAM,CAACoC,EAAP,CAAU,MAAV,EAAmBC,IAAD,IAAQ;AAEzBjB,MAAAA,KAAK,CAAC,IAAD,CAAL;AAEAiB,MAAAA,IAAI,CAACC,MAAL,CAAYf,MAAZ;AAEE,YAAMU,KAAK,GAAGP,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd,CANuB,CASzB;;AACAU,MAAAA,IAAI,CAACD,EAAL,CAAQ,QAAR,EAAmBG,eAAD,IAAmB;AACpCJ,QAAAA,cAAc,CAACF,KAAD,EAAQM,eAAR,CAAd;AACA,OAFD;AAIE,KAdH;AAkBExC,IAAAA,MAAM,CAACqC,EAAP,CAAU,gBAAV,EAA6BI,MAAD,IAAU;AACvC;AACA;AAEA;AAEAC,MAAAA,UAAU,CAACC,gBAAD,EAAkB,IAAlB,EAAuBF,MAAvB,EAA8BjB,MAA9B,CAAV;AACA,KAPC;AAWA,GAlDD;AAyDAxB,EAAAA,MAAM,CAACqC,EAAP,CAAU,mBAAV,EAAgCI,MAAD,IAAU;AAE1CG,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWJ,MAAvB;;AAEA,QAAGX,KAAK,CAACW,MAAD,CAAR,EAAiB;AACdX,MAAAA,KAAK,CAACW,MAAD,CAAL,CAAcK,KAAd;AACA;AACD,GAPD;AAUA7C,EAAAA,MAAM,CAACoC,EAAP,CAAU,MAAV,EAAmBU,EAAD,IAAM;AAEzB;AACA/C,IAAAA,MAAM,CAACgD,IAAP,CAAY,WAAZ,EAAyB1B,QAAzB,EAAmCyB,EAAnC;AAEA,GALC;;AAUC,WAASX,cAAT,CAAwBF,KAAxB,EAA+BV,MAA/B,EAAsC;AAGxCU,IAAAA,KAAK,CAACe,SAAN,GAAkBzB,MAAlB,CAHwC,CAKxC;AAEA;;AACAU,IAAAA,KAAK,CAACgB,gBAAN,CAAuB,gBAAvB,EAAyC,MAAI;AAC5ChB,MAAAA,KAAK,CAACiB,IAAN,GAD4C,CAC/B;AACb,KAFD;AAMA,UAAMC,SAAS,GAAGzB,QAAQ,CAAC0B,cAAT,CAAwB,OAAxB,CAAlB;AAEAD,IAAAA,SAAS,CAACE,MAAV,CAAiBpB,KAAjB;AAGA;;AAID,WAASS,gBAAT,CAA0BF,MAA1B,EAAkCjB,MAAlC,EAAyC;AAGxC,UAAMc,IAAI,GAAGrC,MAAM,CAACqC,IAAP,CAAYG,MAAZ,EAAoBjB,MAApB,CAAb,CAHwC,CAGC;;AAEzC,UAAMU,KAAK,GAAGP,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd,CALwC,CAOxC;;AACAU,IAAAA,IAAI,CAACD,EAAL,CAAQ,QAAR,EAAmBG,eAAD,IAAmB;AACpCJ,MAAAA,cAAc,CAACF,KAAD,EAAQM,eAAR,CAAd;AACA,KAFD;AAIAF,IAAAA,IAAI,CAACD,EAAL,CAAQ,OAAR,EAAiB,MAAI;AACpBH,MAAAA,KAAK,CAACqB,MAAN;AACA,KAFD;AAKAzB,IAAAA,KAAK,CAACW,MAAD,CAAL,GAAgBH,IAAhB;AAEA;;AAIF,QAAMkB,EAAE,GAAE,MAAI;AACb,QAAIC,IAAI,GAAG9B,QAAQ,CAAC0B,cAAT,CAAwB,OAAxB,CAAX;AACW,QAAIK,GAAG,GAAGD,IAAI,CAACE,IAAf,CAFE,CAIX;;AAGAtC,IAAAA,KAAK,CAACqC,GAAG,CAAC,CAAD,CAAH,CAAOE,KAAP,CAAaC,MAAd,CAAL;AAEF,GATD;;AAcA,sBAGI;AAAA,cACCvD,MAAM,iBACT;AAAA,6BAQC;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,EAAE,EAAC,YAA/B;AAAA,+BAEA;AAAO,UAAA,EAAE,EAAC,OAAV;AAAA,kCACK;AAAA,mCAEI;AAAK,cAAA,KAAK,EAAE;AAACwD,gBAAAA,eAAe,EAAC;AAAjB;AAAZ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,kBADL,eAOH;AAAA,oCACA;AAAG,cAAA,KAAK,EAAE;AAACC,gBAAAA,UAAU,EAAC,SAAZ;AAAuBC,gBAAAA,UAAU,EAAC;AAAlC;AAAV;AAAA;AAAA;AAAA;AAAA,oBADA,eAEA;AAAQ,cAAA,OAAO,EAAER,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPG;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AARD;AAAA;AAAA;AAAA;AAAA;AAFE;AAAA;AAAA;AAAA;AAAA,UAHJ;AA4GC;;GAxYQnD,S;UA4H+BN,S;;;KA5H/BM,S;AA0YT,eAAeA,SAAf","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport Axios from'axios';\r\nimport '../App.css'\r\nimport Doctor from '../components/doctorDashboard'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\r\nimport PhoneIcon from \"@material-ui/icons/Phone\"\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\nimport Peer from \"peerjs\"\r\nimport io from \"socket.io-client\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nconst socket = io(\"http://localhost:3001\")\r\n\r\n\r\n\r\n\t\t// This will generate the user ID dynamically\r\n\tconst myPeer = new Peer(undefined, {\r\n\t\thost: '/',\r\n\t\tport: '5000'\r\n\t})\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n\r\nfunction VideoCall() {\r\n\r\n\r\n    // const [ me, setMe ] = useState(\"\")\r\n\t// const [ stream, setStream ] = useState()\r\n\t// const [ receivingCall, setReceivingCall ] = useState(false)\r\n\t// const [ caller, setCaller ] = useState(\"\")\r\n\t// const [ callerSignal, setCallerSignal ] = useState()\r\n\t// const [ callAccepted, setCallAccepted ] = useState(false)\r\n\t// const [ idToCall, setIdToCall ] = useState(\"\")\r\n\t// const [ callEnded, setCallEnded] = useState(false)\r\n\t// const [ name, setName ] = useState(\"\")\r\n\t// const myVideo = useRef()\r\n\t// const userVideo = useRef()\r\n\t// const connectionRef= useRef()\r\n\r\n\t// useEffect(() => {\r\n\t// \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n\t// \t\tsetStream(stream)\r\n\t// \t\t\tmyVideo.current.srcObject = stream\r\n\t// \t})\r\n\r\n\t// socket.on(\"me\", (id) => {\r\n\t// \t\tsetMe(id)\r\n\t// \t})\r\n\r\n\t// \tsocket.on(\"callUser\", (data) => {\r\n\t// \t\tsetReceivingCall(true)\r\n\t// \t\tsetCaller(data.from)\r\n\t// \t\tsetName(data.name)\r\n\t// \t\tsetCallerSignal(data.signal)\r\n\t// \t})\r\n\t// }, [])\r\n\r\n\t// const callUser = (id) => {\r\n\t// \tconst peer = new Peer({\r\n\t// \t\tinitiator: true,\r\n\t// \t\ttrickle: false,\r\n\t// \t\tstream: stream\r\n\t// \t})\r\n\t// \tpeer.on(\"signal\", (data) => {\r\n\t// \t\tsocket.emit(\"callUser\", {\r\n\t// \t\t\tuserToCall: id,\r\n\t// \t\t\tsignalData: data,\r\n\t// \t\t\tfrom: me,\r\n\t// \t\t\tname: name\r\n\t// \t\t})\r\n\t// \t})\r\n\t// \tpeer.on(\"stream\", (stream) => {\r\n\t\t\t\r\n\t// \t\t\tuserVideo.current.srcObject = stream\r\n\t\t\t\r\n\t// \t})\r\n\t// \tsocket.on(\"callAccepted\", (signal) => {\r\n\t// \t\tsetCallAccepted(true)\r\n\t// \t\tpeer.signal(signal)\r\n\t// \t})\r\n\r\n\t// \tconnectionRef.current = peer\r\n\t// }\r\n\r\n\t// const answerCall =() =>  {\r\n\t// \tsetCallAccepted(true)\r\n\t// \tconst peer = new Peer({\r\n\t// \t\tinitiator: false,\r\n\t// \t\ttrickle: false,\r\n\t// \t\tstream: stream\r\n\t// \t})\r\n\t// \tpeer.on(\"signal\", (data) => {\r\n\t// \t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\r\n\t// \t})\r\n\t// \tpeer.on(\"stream\", (stream) => {\r\n\t// \t\tuserVideo.current.srcObject = stream\r\n\t// \t})\r\n\r\n\t// \tpeer.signal(callerSignal)\r\n\t// \tconnectionRef.current = peer\r\n\t// }\r\n\r\n\t// const leaveCall = () => {\r\n\t// \tsetCallEnded(true)\r\n\t// \tconnectionRef.current.destroy()\r\n\t// }\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n        \r\n    const [render, setRender] = useState(true)\r\n\r\n    const getDoctorID = ()=>{\r\n      \r\n        Axios.get('http://localhost:3001/Doctor_ID').then(res => {\r\n                  \r\n        // setList(res.data)\r\n        \r\n      \r\n        var string = JSON.stringify(res.data)\r\n            \r\n        var json = JSON.parse(string)\r\n      \r\n      // alert(string)\r\n        // alert(json.doctor_id);\r\n\r\n\r\n        if(json.doctor_id === 0){\r\n          setRender(false)\r\n          window.location='/'\r\n          alert(\"You Need To Sign In First!!!\")\r\n        }\r\n        \r\n        // else{\r\n        //   setRender(true)\r\n        // }\r\n            })\r\n      \r\n      }\r\n      \r\n      getDoctorID()\r\n      \r\n\r\n\r\n\t  const [video_id,setVideoId]=useState(useParams().video_id)\r\n\t  \r\n\t  //   alert(video_id)\r\n\t  \r\n\t  const [stream, setStream] = useState()\r\n\r\n\r\n\t//   const videoGrid = document.getElementById('video-grid')\r\n\r\n\r\n\t\t\r\n\r\n\r\n\r\n\t  const myVideo = document.createElement('video')\r\n\t  myVideo.muted = true\r\n  \r\n\r\n\t  const peers = {}\r\n  \r\n\r\n\r\n\r\n\t  navigator.mediaDevices.getUserMedia({\r\n\t\t  video: true,\r\n\t\t  audio: true\r\n\t  }).then((stream)=>{ // stream is gonna be video and audio\r\n\r\n\r\n  \r\n\r\n\t\r\n\t\r\n\taddVideoStream(myVideo, stream)\r\n\r\n\r\n\t\t// setStream(stream)\r\n\r\n\t\t\r\n\r\n\t\t\r\n\r\n\r\n\r\n\t\tmyPeer.on('call', (call)=>{\r\n\r\n\t\t\talert('dd')\r\n\t\t\t\r\n\t\t\tcall.answer(stream)\r\n\t\t\t  \r\n\t\t\t  const video = document.createElement('video')\r\n\t\r\n\t\r\n\t\t\t// event for the user to send their stream to us\r\n\t\t\tcall.on('stream', (userVideoStream)=>{\r\n\t\t\t\taddVideoStream(video, userVideoStream)\r\n\t\t\t})\r\n\t\r\n\t\t  })\r\n\r\n\t\t  \r\n\r\n\t\t  socket.on('user-connected', (userId)=>{\r\n\t\t\t// alert(userId)\r\n\t\t\t// console.log(userId)\r\n\r\n\t\t\t// connectToNewUser(userId, stream)\r\n\r\n\t\t\tsetTimeout(connectToNewUser,1000,userId,stream)\r\n\t\t})\t\r\n\t\r\n\r\n\t\t\r\n\t  })\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\t  socket.on('user-disconnected', (userId)=>{\r\n\t\t\r\n\t\tconsole.log('user: ' + userId)\r\n\t\t\r\n\t\tif(peers[userId]){\r\n\t\t\t  peers[userId].close()\r\n\t\t  }\r\n\t  })\r\n\r\n\r\n\t  myPeer.on('open', (id)=>{\t\t\r\n\r\n\t\t// Send an event to the server\r\n\t\tsocket.emit('join-room', video_id, id)\r\n\t\r\n\t})\r\n\t\r\n\t\r\n\r\n\r\n    function addVideoStream(video, stream){\r\n\r\n\t\r\n\t\tvideo.srcObject = stream\r\n\r\n\t\t// video.play()\r\n\t\t\r\n\t\t// loading stream \r\n\t\tvideo.addEventListener('loadedmetadata', ()=>{\r\n\t\t\tvideo.play() // play video\r\n\t\t})\r\n\r\n\r\n\t\t\r\n\t\tconst videoGrid = document.getElementById('table')\r\n\r\n\t\tvideoGrid.append(video)\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction connectToNewUser(userId, stream){\r\n\r\n\t\t\r\n\t\tconst call = myPeer.call(userId, stream) // calling the user and sending our stream\r\n\t\t\r\n\t\tconst video = document.createElement('video')\r\n\r\n\t\t// event for the user to send their stream to us\r\n\t\tcall.on('stream', (userVideoStream)=>{\r\n\t\t\taddVideoStream(video, userVideoStream)\r\n\t\t})\r\n\r\n\t\tcall.on('close', ()=>{\r\n\t\t\tvideo.remove()\r\n\t\t})\r\n\r\n\r\n\t\tpeers[userId] = call\r\n\r\n\t}\r\n\r\n\r\n\r\nconst kk= ()=>{\r\n\tvar tble = document.getElementById('table');\r\n            var row = tble.rows\r\n\r\n\t\t\t// row[1].deleteCell(1)\r\n\r\n\t\t\t\r\n\t\t\talert(row[0].cells.length)\r\n\r\n}\r\n\r\n\r\n\r\n\r\nreturn(\r\n\r\n    \r\n    <div>\r\n    {render && (\r\n\t\t<div>\r\n\t\t\r\n\t\t\r\n\t\t  {/* <script src='/VideoCall.js'></script> */}\r\n      \r\n\t  \r\n\t  {/* <Doctor/> */}\r\n\r\n\t  <div className='video-grid' id='video-grid'>\r\n\t\t  \r\n\t  <table id=\"table\">\r\n        <colgroup>\r\n            {/* <col id=\"myCol\" span=\"2\"/> */}\r\n            <col style={{backgroundColor:\"green\"}}/>\r\n        </colgroup>\r\n\r\n\r\n<tr>\r\n<p style={{visibility:'visible', background:'red'}}></p>\r\n<button onClick={kk}>\r\n        Click here\r\n    </button>\r\n</tr>\r\n\r\n\t\t</table>\r\n\r\n\t\t  \r\n\r\n\t  </div>\r\n\r\n\r\n{/* \r\n      <>\r\n\t\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"video-container\">\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{callAccepted && !callEnded ?\r\n\t\t\t\t\t<video playsInline ref={userVideo} autoPlay style={{ width: \"300px\"}} />:\r\n\t\t\t\t\tnull}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"myId\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\tstyle={{ marginBottom: \"20px\" }}\r\n\t\t\t\t/>\r\n\t\t\t\t<CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\r\n\t\t\t\t\t\tCopy ID\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</CopyToClipboard>\r\n\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"ID to call\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={idToCall}\r\n\t\t\t\t\tonChange={(e) => setIdToCall(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"call-button\">\r\n\t\t\t\t\t{callAccepted && !callEnded ? (\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n\t\t\t\t\t\t\tEnd Call\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n\t\t\t\t\t\t\t<PhoneIcon fontSize=\"large\" />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{idToCall}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{receivingCall && !callAccepted ? (\r\n\t\t\t\t\t\t<div className=\"caller\">\r\n\t\t\t\t\t\t<h1 >{name} is calling...</h1>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n\t\t\t\t\t\t\tAnswer\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</> */}\r\n    \r\n        \r\n      </div>\r\n\r\n    )}\r\n  </div>\r\n  \r\n\r\n)\r\n\r\n\r\n}\r\n\r\nexport default VideoCall"]},"metadata":{},"sourceType":"module"}