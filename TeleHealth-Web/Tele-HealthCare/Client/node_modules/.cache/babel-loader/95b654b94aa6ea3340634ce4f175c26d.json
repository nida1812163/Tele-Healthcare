{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashar\\\\Desktop\\\\current tele\\\\Tele-Healthcare\\\\Tele-Healthcare\\\\Client\\\\src\\\\pages\\\\VideoCall.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from 'axios';\nimport '../App.css';\nimport Doctor from '../components/doctorDashboard';\nimport Button from \"@material-ui/core/Button\";\nimport { IconButton, TextField } from '@material-ui/core';\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Peer from \"peerjs\";\nimport io from \"socket.io-client\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3001\"); // This will generate the user ID dynamically\n\nconst myPeer = new Peer(undefined, {\n  host: '/',\n  port: '5000'\n});\n\nfunction VideoCall() {\n  _s();\n\n  const [render, setRender] = useState(true);\n\n  const getDoctorID = () => {\n    Axios.get('http://localhost:3001/Doctor_ID').then(res => {\n      // setList(res.data)\n      var string = JSON.stringify(res.data);\n      var json = JSON.parse(string); // alert(string)\n      // alert(json.doctor_id);\n\n      if (json.doctor_id === 0) {\n        setRender(false);\n        window.location = '/';\n        alert(\"You Need To Sign In First!!!\");\n      } // else{\n      //   setRender(true)\n      // }\n\n    });\n  };\n\n  getDoctorID(); // const [ me, setMe ] = useState(\"\")\n  // const [ stream, setStream ] = useState()\n  // const [ receivingCall, setReceivingCall ] = useState(false)\n  // const [ caller, setCaller ] = useState(\"\")\n  // const [ callerSignal, setCallerSignal ] = useState()\n  // const [ callAccepted, setCallAccepted ] = useState(false)\n  // const [ idToCall, setIdToCall ] = useState(\"\")\n  // const [ callEnded, setCallEnded] = useState(false)\n  // const [ name, setName ] = useState(\"\")\n  // const myVideo = useRef()\n  // const userVideo = useRef()\n  // const connectionRef= useRef()\n  // useEffect(() => {\n  // \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\n  // \t\tsetStream(stream)\n  // \t\t\tmyVideo.current.srcObject = stream\n  // \t})\n  // socket.on(\"me\", (id) => {\n  // \t\tsetMe(id)\n  // \t})\n  // \tsocket.on(\"callUser\", (data) => {\n  // \t\tsetReceivingCall(true)\n  // \t\tsetCaller(data.from)\n  // \t\tsetName(data.name)\n  // \t\tsetCallerSignal(data.signal)\n  // \t})\n  // }, [])\n  // const callUser = (id) => {\n  // \tconst peer = new Peer({\n  // \t\tinitiator: true,\n  // \t\ttrickle: false,\n  // \t\tstream: stream\n  // \t})\n  // \tpeer.on(\"signal\", (data) => {\n  // \t\tsocket.emit(\"callUser\", {\n  // \t\t\tuserToCall: id,\n  // \t\t\tsignalData: data,\n  // \t\t\tfrom: me,\n  // \t\t\tname: name\n  // \t\t})\n  // \t})\n  // \tpeer.on(\"stream\", (stream) => {\n  // \t\t\tuserVideo.current.srcObject = stream\n  // \t})\n  // \tsocket.on(\"callAccepted\", (signal) => {\n  // \t\tsetCallAccepted(true)\n  // \t\tpeer.signal(signal)\n  // \t})\n  // \tconnectionRef.current = peer\n  // }\n  // const answerCall =() =>  {\n  // \tsetCallAccepted(true)\n  // \tconst peer = new Peer({\n  // \t\tinitiator: false,\n  // \t\ttrickle: false,\n  // \t\tstream: stream\n  // \t})\n  // \tpeer.on(\"signal\", (data) => {\n  // \t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\n  // \t})\n  // \tpeer.on(\"stream\", (stream) => {\n  // \t\tuserVideo.current.srcObject = stream\n  // \t})\n  // \tpeer.signal(callerSignal)\n  // \tconnectionRef.current = peer\n  // }\n  // const leaveCall = () => {\n  // \tsetCallEnded(true)\n  // \tconnectionRef.current.destroy()\n  // }\n\n  const [stream, setStream] = useState();\n  const myVideo = useRef();\n  const [video_id, setVideoId] = useState(useParams().video_id); //   alert(video_id)\n  // \t  const myVideo = document.createElement('video')\n  // \t  myVideo.muted = true\n\n  const peers = {}; // useEffect(() => {\n  // \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\n  // \t\tsetStream(stream)\n  // \t\t\tmyVideo.current.srcObject = stream\n  // \t\t\t\t// addVideoStream(myVideo, stream)Z\n  // \tmyPeer.on('call', (call)=>{\n  // \t\talert('dd')\n  // \t\tcall.answer(stream)\n  // \t\t  const video = document.createElement('video')\n  // \t\t// event for the user to send their stream to us\n  // \t\tcall.on('stream', (userVideoStream)=>{\n  // \t\t\taddVideoStream(video, userVideoStream)\n  // \t\t})\n  // \t  })\n  // \t  socket.on('user-connected', (userId)=>{\n  // \t\t// alert(userId)\n  // \t\t// console.log(userId)\n  // \t\tsetTimeout(connectToNewUser,1000,userId,stream)\n  // \t})\n  // })\n  // }, [])\n  // \t  const [video_id,setVideoId]=useState(useParams().video_id)\n  // \t  //   alert(video_id)\n  // // \t  const myVideo = document.createElement('video')\n  // // \t  myVideo.muted = true\n  // \t  const peers = {}\n\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  }).then(stream => {\n    // stream is gonna be video and audio\n    addVideoStream(myVideo, stream); // setStream(stream)\n\n    myPeer.on('call', call => {\n      alert('dd');\n      call.answer(stream);\n      const video = document.createElement('video'); // event for the user to send their stream to us\n\n      call.on('stream', userVideoStream => {\n        addVideoStream(video, userVideoStream);\n      });\n    });\n    socket.on('user-connected', userId => {\n      // alert(userId)\n      // console.log(userId)\n      // connectToNewUser(userId, stream)\n      setTimeout(connectToNewUser, 1000, userId, stream);\n    });\n  });\n  socket.on('user-disconnected', userId => {\n    console.log('user: ' + userId);\n\n    if (peers[userId]) {\n      peers[userId].close();\n    }\n  });\n  myPeer.on('open', id => {\n    // Send an event to the server\n    socket.emit('join-room', video_id, id);\n  });\n\n  function addVideoStream(video, stream) {\n    setStream(video);\n    video.current.srcObject = stream; // video.play()\n    // loading stream \n    // video.addEventListener('loadedmetadata', ()=>{\n    // \tvideo.play() // play video\n    // })\n\n    const videoGrid = document.getElementById('video-grid'); // videoGrid.append(video)\n    // setStream(video)\n  }\n\n  function connectToNewUser(userId, stream) {\n    const call = myPeer.call(userId, stream); // calling the user and sending our stream\n\n    const video = document.createElement('video'); // event for the user to send their stream to us\n\n    call.on('stream', userVideoStream => {\n      addVideoStream(video, userVideoStream);\n    });\n    call.on('close', () => {\n      video.remove();\n    });\n    peers[userId] = call;\n  }\n\n  const kk = () => {\n    var tble = document.getElementById('table');\n    var row = tble.rows;\n    row[2].deleteCell(0);\n    alert(row.length);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: render && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"table\",\n          children: [/*#__PURE__*/_jsxDEV(\"colgroup\", {\n            children: /*#__PURE__*/_jsxDEV(\"col\", {\n              style: {\n                backgroundColor: \"green\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 4\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"664\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 2\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 2\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"scsd64\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 2\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 2\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"video-grid\",\n                id: \"video-grid\",\n                children: stream && /*#__PURE__*/_jsxDEV(\"video\", {\n                  className: \"video\",\n                  playsInline: true,\n                  muted: true,\n                  ref: myVideo,\n                  autoPlay: true,\n                  style: {\n                    width: \"300px\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 2\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 2\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 2\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: kk,\n          children: \"Click here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoCall, \"hfLGbl/2YTS2O+2oQq+PbxK45Rk=\", false, function () {\n  return [useParams];\n});\n\n_c = VideoCall;\nexport default VideoCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"sources":["C:/Users/ashar/Desktop/current tele/Tele-Healthcare/Tele-Healthcare/Client/src/pages/VideoCall.js"],"names":["React","useEffect","useRef","useState","Axios","Doctor","Button","IconButton","TextField","AssignmentIcon","PhoneIcon","CopyToClipboard","Peer","io","useParams","socket","myPeer","undefined","host","port","VideoCall","render","setRender","getDoctorID","get","then","res","string","JSON","stringify","data","json","parse","doctor_id","window","location","alert","stream","setStream","myVideo","video_id","setVideoId","peers","navigator","mediaDevices","getUserMedia","video","audio","addVideoStream","on","call","answer","document","createElement","userVideoStream","userId","setTimeout","connectToNewUser","console","log","close","id","emit","current","srcObject","videoGrid","getElementById","remove","kk","tble","row","rows","deleteCell","length","backgroundColor","width"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAOC,KAAP,MAAiB,OAAjB;AACA,OAAO,YAAP;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,mBAAtC;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AAKA,MAAMC,MAAM,GAAGF,EAAE,CAAC,uBAAD,CAAjB,C,CAIE;;AACD,MAAMG,MAAM,GAAG,IAAIJ,IAAJ,CAASK,SAAT,EAAoB;AAClCC,EAAAA,IAAI,EAAE,GAD4B;AAElCC,EAAAA,IAAI,EAAE;AAF4B,CAApB,CAAf;;AAWD,SAASC,SAAT,GAAqB;AAAA;;AAGjB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,IAAD,CAApC;;AAEA,QAAMoB,WAAW,GAAG,MAAI;AAEpBnB,IAAAA,KAAK,CAACoB,GAAN,CAAU,iCAAV,EAA6CC,IAA7C,CAAkDC,GAAG,IAAI;AAEzD;AAGA,UAAIC,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAeH,GAAG,CAACI,IAAnB,CAAb;AAEA,UAAIC,IAAI,GAAGH,IAAI,CAACI,KAAL,CAAWL,MAAX,CAAX,CAPyD,CAS3D;AACE;;AAGA,UAAGI,IAAI,CAACE,SAAL,KAAmB,CAAtB,EAAwB;AACtBX,QAAAA,SAAS,CAAC,KAAD,CAAT;AACAY,QAAAA,MAAM,CAACC,QAAP,GAAgB,GAAhB;AACAC,QAAAA,KAAK,CAAC,8BAAD,CAAL;AACD,OAjBwD,CAmBzD;AACA;AACA;;AACK,KAtBL;AAwBD,GA1BH;;AA4BEb,EAAAA,WAAW,GAjCI,CAwCd;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAMA,QAAM,CAAEc,MAAF,EAAUC,SAAV,IAAwBnC,QAAQ,EAAtC;AACA,QAAMoC,OAAO,GAAGrC,MAAM,EAAtB;AAIA,QAAM,CAACsC,QAAD,EAAUC,UAAV,IAAsBtC,QAAQ,CAACW,SAAS,GAAG0B,QAAb,CAApC,CAlIoB,CAoIpB;AAGD;AACA;;AAGC,QAAME,KAAK,GAAG,EAAd,CA3IoB,CAiJpB;AACA;AACA;AACA;AAGA;AAIA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAUD;AAEA;AAGA;AACA;AAGA;;AAKGC,EAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACnCC,IAAAA,KAAK,EAAE,IAD4B;AAEnCC,IAAAA,KAAK,EAAE;AAF4B,GAApC,EAGGtB,IAHH,CAGSY,MAAD,IAAU;AAAE;AAOtBW,IAAAA,cAAc,CAACT,OAAD,EAAUF,MAAV,CAAd,CAPoB,CAUnB;;AAQArB,IAAAA,MAAM,CAACiC,EAAP,CAAU,MAAV,EAAmBC,IAAD,IAAQ;AAEzBd,MAAAA,KAAK,CAAC,IAAD,CAAL;AAEAc,MAAAA,IAAI,CAACC,MAAL,CAAYd,MAAZ;AAEE,YAAMS,KAAK,GAAGM,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd,CANuB,CASzB;;AACAH,MAAAA,IAAI,CAACD,EAAL,CAAQ,QAAR,EAAmBK,eAAD,IAAmB;AACpCN,QAAAA,cAAc,CAACF,KAAD,EAAQQ,eAAR,CAAd;AACA,OAFD;AAIE,KAdH;AAkBEvC,IAAAA,MAAM,CAACkC,EAAP,CAAU,gBAAV,EAA6BM,MAAD,IAAU;AACvC;AACA;AAEA;AAEAC,MAAAA,UAAU,CAACC,gBAAD,EAAkB,IAAlB,EAAuBF,MAAvB,EAA8BlB,MAA9B,CAAV;AACA,KAPC;AAWA,GAlDD;AAyDAtB,EAAAA,MAAM,CAACkC,EAAP,CAAU,mBAAV,EAAgCM,MAAD,IAAU;AAE1CG,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWJ,MAAvB;;AAEA,QAAGb,KAAK,CAACa,MAAD,CAAR,EAAiB;AACdb,MAAAA,KAAK,CAACa,MAAD,CAAL,CAAcK,KAAd;AACA;AACD,GAPD;AAUA5C,EAAAA,MAAM,CAACiC,EAAP,CAAU,MAAV,EAAmBY,EAAD,IAAM;AAEzB;AACA9C,IAAAA,MAAM,CAAC+C,IAAP,CAAY,WAAZ,EAAyBtB,QAAzB,EAAmCqB,EAAnC;AAEA,GALC;;AAUC,WAASb,cAAT,CAAwBF,KAAxB,EAA+BT,MAA/B,EAAsC;AAExCC,IAAAA,SAAS,CAACQ,KAAD,CAAT;AAEAA,IAAAA,KAAK,CAACiB,OAAN,CAAcC,SAAd,GAA0B3B,MAA1B,CAJwC,CAMxC;AAEA;AACA;AACA;AACA;;AAIA,UAAM4B,SAAS,GAAGb,QAAQ,CAACc,cAAT,CAAwB,YAAxB,CAAlB,CAfwC,CAiBxC;AAEA;AAGA;;AAID,WAAST,gBAAT,CAA0BF,MAA1B,EAAkClB,MAAlC,EAAyC;AAGxC,UAAMa,IAAI,GAAGlC,MAAM,CAACkC,IAAP,CAAYK,MAAZ,EAAoBlB,MAApB,CAAb,CAHwC,CAGC;;AAEzC,UAAMS,KAAK,GAAGM,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd,CALwC,CAOxC;;AACAH,IAAAA,IAAI,CAACD,EAAL,CAAQ,QAAR,EAAmBK,eAAD,IAAmB;AACpCN,MAAAA,cAAc,CAACF,KAAD,EAAQQ,eAAR,CAAd;AACA,KAFD;AAIAJ,IAAAA,IAAI,CAACD,EAAL,CAAQ,OAAR,EAAiB,MAAI;AACpBH,MAAAA,KAAK,CAACqB,MAAN;AACA,KAFD;AAKAzB,IAAAA,KAAK,CAACa,MAAD,CAAL,GAAgBL,IAAhB;AAEA;;AAIF,QAAMkB,EAAE,GAAE,MAAI;AACb,QAAIC,IAAI,GAAGjB,QAAQ,CAACc,cAAT,CAAwB,OAAxB,CAAX;AACW,QAAII,GAAG,GAAGD,IAAI,CAACE,IAAf;AAETD,IAAAA,GAAG,CAAC,CAAD,CAAH,CAAOE,UAAP,CAAkB,CAAlB;AAGApC,IAAAA,KAAK,CAACkC,GAAG,CAACG,MAAL,CAAL;AAEF,GATD;;AAcA,sBAGI;AAAA,cACCpD,MAAM,iBACT;AAAA,6BAGF;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCAEI;AAAO,UAAA,EAAE,EAAC,OAAV;AAAA,kCACD;AAAA,mCAEC;AAAK,cAAA,KAAK,EAAE;AAACqD,gBAAAA,eAAe,EAAC;AAAjB;AAAZ;AAAA;AAAA;AAAA;AAAA;AAFD;AAAA;AAAA;AAAA;AAAA,kBADC,eAOH;AAAA,mCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBAPG,eAYH;AAAA,mCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBAZG,eAgBH;AAAA,mCACA;AAAA,qCACA;AAAK,gBAAA,SAAS,EAAC,YAAf;AAA4B,gBAAA,EAAE,EAAC,YAA/B;AAAA,0BACErC,MAAM,iBAAK;AAAO,kBAAA,SAAS,EAAC,OAAjB;AAAyB,kBAAA,WAAW,MAApC;AAAqC,kBAAA,KAAK,MAA1C;AAA2C,kBAAA,GAAG,EAAEE,OAAhD;AAAyD,kBAAA,QAAQ,MAAjE;AAAkE,kBAAA,KAAK,EAAE;AAAEoC,oBAAAA,KAAK,EAAE;AAAT;AAAzE;AAAA;AAAA;AAAA;AAAA;AADb;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBAhBG;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eA4BG;AAAQ,UAAA,OAAO,EAAEP,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA5BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAHE;AAAA;AAAA;AAAA;AAAA;AAFE;AAAA;AAAA;AAAA;AAAA,UAHJ;AA4HC;;GArdQhD,S;UAkI6BN,S;;;KAlI7BM,S;AAydT,eAAeA,SAAf","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport Axios from'axios';\r\nimport '../App.css'\r\nimport Doctor from '../components/doctorDashboard'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\r\nimport PhoneIcon from \"@material-ui/icons/Phone\"\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\nimport Peer from \"peerjs\"\r\nimport io from \"socket.io-client\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nconst socket = io(\"http://localhost:3001\")\r\n\r\n\r\n\r\n\t\t// This will generate the user ID dynamically\r\n\tconst myPeer = new Peer(undefined, {\r\n\t\thost: '/',\r\n\t\tport: '5000'\r\n\t})\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n\r\nfunction VideoCall() {\r\n\r\n\r\n    const [render, setRender] = useState(true)\r\n\r\n    const getDoctorID = ()=>{\r\n      \r\n        Axios.get('http://localhost:3001/Doctor_ID').then(res => {\r\n                  \r\n        // setList(res.data)\r\n        \r\n      \r\n        var string = JSON.stringify(res.data)\r\n            \r\n        var json = JSON.parse(string)\r\n      \r\n      // alert(string)\r\n        // alert(json.doctor_id);\r\n\r\n\r\n        if(json.doctor_id === 0){\r\n          setRender(false)\r\n          window.location='/'\r\n          alert(\"You Need To Sign In First!!!\")\r\n        }\r\n        \r\n        // else{\r\n        //   setRender(true)\r\n        // }\r\n            })\r\n      \r\n      }\r\n      \r\n      getDoctorID()\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\t      // const [ me, setMe ] = useState(\"\")\r\n\t// const [ stream, setStream ] = useState()\r\n\t// const [ receivingCall, setReceivingCall ] = useState(false)\r\n\t// const [ caller, setCaller ] = useState(\"\")\r\n\t// const [ callerSignal, setCallerSignal ] = useState()\r\n\t// const [ callAccepted, setCallAccepted ] = useState(false)\r\n\t// const [ idToCall, setIdToCall ] = useState(\"\")\r\n\t// const [ callEnded, setCallEnded] = useState(false)\r\n\t// const [ name, setName ] = useState(\"\")\r\n\t// const myVideo = useRef()\r\n\t// const userVideo = useRef()\r\n\t// const connectionRef= useRef()\r\n\r\n\t// useEffect(() => {\r\n\t// \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n\t// \t\tsetStream(stream)\r\n\t// \t\t\tmyVideo.current.srcObject = stream\r\n\t// \t})\r\n\r\n\t// socket.on(\"me\", (id) => {\r\n\t// \t\tsetMe(id)\r\n\t// \t})\r\n\r\n\t// \tsocket.on(\"callUser\", (data) => {\r\n\t// \t\tsetReceivingCall(true)\r\n\t// \t\tsetCaller(data.from)\r\n\t// \t\tsetName(data.name)\r\n\t// \t\tsetCallerSignal(data.signal)\r\n\t// \t})\r\n\t// }, [])\r\n\r\n\t// const callUser = (id) => {\r\n\t// \tconst peer = new Peer({\r\n\t// \t\tinitiator: true,\r\n\t// \t\ttrickle: false,\r\n\t// \t\tstream: stream\r\n\t// \t})\r\n\t// \tpeer.on(\"signal\", (data) => {\r\n\t// \t\tsocket.emit(\"callUser\", {\r\n\t// \t\t\tuserToCall: id,\r\n\t// \t\t\tsignalData: data,\r\n\t// \t\t\tfrom: me,\r\n\t// \t\t\tname: name\r\n\t// \t\t})\r\n\t// \t})\r\n\t// \tpeer.on(\"stream\", (stream) => {\r\n\t\t\t\r\n\t// \t\t\tuserVideo.current.srcObject = stream\r\n\t\t\t\r\n\t// \t})\r\n\t// \tsocket.on(\"callAccepted\", (signal) => {\r\n\t// \t\tsetCallAccepted(true)\r\n\t// \t\tpeer.signal(signal)\r\n\t// \t})\r\n\r\n\t// \tconnectionRef.current = peer\r\n\t// }\r\n\r\n\t// const answerCall =() =>  {\r\n\t// \tsetCallAccepted(true)\r\n\t// \tconst peer = new Peer({\r\n\t// \t\tinitiator: false,\r\n\t// \t\ttrickle: false,\r\n\t// \t\tstream: stream\r\n\t// \t})\r\n\t// \tpeer.on(\"signal\", (data) => {\r\n\t// \t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\r\n\t// \t})\r\n\t// \tpeer.on(\"stream\", (stream) => {\r\n\t// \t\tuserVideo.current.srcObject = stream\r\n\t// \t})\r\n\r\n\t// \tpeer.signal(callerSignal)\r\n\t// \tconnectionRef.current = peer\r\n\t// }\r\n\r\n\t// const leaveCall = () => {\r\n\t// \tsetCallEnded(true)\r\n\t// \tconnectionRef.current.destroy()\r\n\t// }\r\n    \r\n\r\n\r\n\r\n\r\n\tconst [ stream, setStream ] = useState()\r\n\tconst myVideo = useRef()\r\n\t\r\n\r\n\r\n\tconst [video_id,setVideoId]=useState(useParams().video_id)\r\n\t  \r\n\t//   alert(video_id)\r\n\t\r\n\r\n// \t  const myVideo = document.createElement('video')\r\n// \t  myVideo.muted = true\r\n\r\n\r\n\tconst peers = {}\r\n\r\n\r\n\r\n\r\n\r\n\t// useEffect(() => {\r\n\t// \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n\t// \t\tsetStream(stream)\r\n\t// \t\t\tmyVideo.current.srcObject = stream\r\n\r\n\r\n\t// \t\t\t\t// addVideoStream(myVideo, stream)Z\r\n\r\n\r\n\r\n\t// \tmyPeer.on('call', (call)=>{\r\n\r\n\t// \t\talert('dd')\r\n\t\t\t\r\n\t// \t\tcall.answer(stream)\r\n\t\t\t  \r\n\t// \t\t  const video = document.createElement('video')\r\n\t\r\n\t\r\n\t// \t\t// event for the user to send their stream to us\r\n\t// \t\tcall.on('stream', (userVideoStream)=>{\r\n\t// \t\t\taddVideoStream(video, userVideoStream)\r\n\t// \t\t})\r\n\t\r\n\t// \t  })\r\n\r\n\t\t  \r\n\r\n\t// \t  socket.on('user-connected', (userId)=>{\r\n\t// \t\t// alert(userId)\r\n\t// \t\t// console.log(userId)\r\n\r\n\t// \t\tsetTimeout(connectToNewUser,1000,userId,stream)\r\n\t// \t})\r\n\t// })\r\n\r\n\t// }, [])\r\n\r\n\r\n\t\r\n    \r\n\r\n\r\n\r\n\r\n        \r\n// \t  const [video_id,setVideoId]=useState(useParams().video_id)\r\n\t  \r\n// \t  //   alert(video_id)\r\n\t  \r\n\r\n// // \t  const myVideo = document.createElement('video')\r\n// // \t  myVideo.muted = true\r\n  \r\n\r\n// \t  const peers = {}\r\n  \r\n\r\n\r\n\r\n\t  navigator.mediaDevices.getUserMedia({\r\n\t\t  video: true,\r\n\t\t  audio: true\r\n\t  }).then((stream)=>{ // stream is gonna be video and audio\r\n\r\n\r\n  \r\n\r\n\t\r\n\t\r\n\taddVideoStream(myVideo, stream)\r\n\r\n\r\n\t\t// setStream(stream)\r\n\r\n\t\t\r\n\r\n\t\t\r\n\r\n\r\n\r\n\t\tmyPeer.on('call', (call)=>{\r\n\r\n\t\t\talert('dd')\r\n\t\t\t\r\n\t\t\tcall.answer(stream)\r\n\t\t\t  \r\n\t\t\t  const video = document.createElement('video')\r\n\t\r\n\t\r\n\t\t\t// event for the user to send their stream to us\r\n\t\t\tcall.on('stream', (userVideoStream)=>{\r\n\t\t\t\taddVideoStream(video, userVideoStream)\r\n\t\t\t})\r\n\t\r\n\t\t  })\r\n\r\n\t\t  \r\n\r\n\t\t  socket.on('user-connected', (userId)=>{\r\n\t\t\t// alert(userId)\r\n\t\t\t// console.log(userId)\r\n\r\n\t\t\t// connectToNewUser(userId, stream)\r\n\r\n\t\t\tsetTimeout(connectToNewUser,1000,userId,stream)\r\n\t\t})\t\r\n\t\r\n\r\n\t\t\r\n\t  })\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\t  socket.on('user-disconnected', (userId)=>{\r\n\t\t\r\n\t\tconsole.log('user: ' + userId)\r\n\t\t\r\n\t\tif(peers[userId]){\r\n\t\t\t  peers[userId].close()\r\n\t\t  }\r\n\t  })\r\n\r\n\r\n\t  myPeer.on('open', (id)=>{\t\t\r\n\r\n\t\t// Send an event to the server\r\n\t\tsocket.emit('join-room', video_id, id)\r\n\t\r\n\t})\r\n\t\r\n\t\r\n\r\n\r\n    function addVideoStream(video, stream){\r\n\r\n\t\tsetStream(video)\r\n\t\r\n\t\tvideo.current.srcObject = stream\r\n\r\n\t\t// video.play()\r\n\t\t\r\n\t\t// loading stream \r\n\t\t// video.addEventListener('loadedmetadata', ()=>{\r\n\t\t// \tvideo.play() // play video\r\n\t\t// })\r\n\r\n\r\n\t\t\r\n\t\tconst videoGrid = document.getElementById('video-grid')\r\n\t\t\r\n\t\t// videoGrid.append(video)\r\n\t\t\r\n\t\t// setStream(video)\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction connectToNewUser(userId, stream){\r\n\r\n\t\t\r\n\t\tconst call = myPeer.call(userId, stream) // calling the user and sending our stream\r\n\t\t\r\n\t\tconst video = document.createElement('video')\r\n\r\n\t\t// event for the user to send their stream to us\r\n\t\tcall.on('stream', (userVideoStream)=>{\r\n\t\t\taddVideoStream(video, userVideoStream)\r\n\t\t})\r\n\r\n\t\tcall.on('close', ()=>{\r\n\t\t\tvideo.remove()\r\n\t\t})\r\n\r\n\r\n\t\tpeers[userId] = call\r\n\r\n\t}\r\n\r\n\r\n\r\nconst kk= ()=>{\r\n\tvar tble = document.getElementById('table');\r\n            var row = tble.rows\r\n\r\n\t\t\trow[2].deleteCell(0)\r\n\r\n\t\t\t\r\n\t\t\talert(row.length)\r\n\r\n}\r\n\r\n\r\n\r\n\r\nreturn(\r\n\r\n    \r\n    <div>\r\n    {render && (\r\n\t\t<div>\r\n\r\n\r\n<div className='container'>\r\n\t\t  \r\n\t\t  <table id=\"table\">\r\n\t\t\t<colgroup>\r\n\t\t\t\t{/* <col id=\"myCol\" span=\"2\"/> */}\r\n\t\t\t\t<col style={{backgroundColor:\"green\"}}/>\r\n\t\t\t</colgroup>\r\n\t\r\n\t\r\n\t<tr>\r\n\t<th>664</th>\r\n\t\r\n\t</tr>\r\n\t\r\n\t<tr > \r\n\t<th>scsd64</th>\r\n\t </tr>\r\n\t\r\n\t<tr>\r\n\t<th>\r\n\t<div className='video-grid' id='video-grid'>\r\n\t\t{stream &&  <video className='video' playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\r\n\t</div>\r\n\t</th>\r\n\t</tr>\r\n\t\t\t</table>\r\n\t\r\n\t\t\t<button onClick={kk}>\r\n\t\t\tClick here\r\n\t\t</button>\r\n\t\r\n\t\t  </div>\r\n\r\n\r\n\r\n\r\n\t\t  {/* <script src='/VideoCall.js'></script> */}\r\n      \r\n\t  \r\n\t  {/* <Doctor/> */}\r\n\r\n\r\n\r\n{/* \r\n      <>\r\n\t\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"video-container\">\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{callAccepted && !callEnded ?\r\n\t\t\t\t\t<video playsInline ref={userVideo} autoPlay style={{ width: \"300px\"}} />:\r\n\t\t\t\t\tnull}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"myId\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\tstyle={{ marginBottom: \"20px\" }}\r\n\t\t\t\t/>\r\n\t\t\t\t<CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\r\n\t\t\t\t\t\tCopy ID\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</CopyToClipboard>\r\n\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"ID to call\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={idToCall}\r\n\t\t\t\t\tonChange={(e) => setIdToCall(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"call-button\">\r\n\t\t\t\t\t{callAccepted && !callEnded ? (\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n\t\t\t\t\t\t\tEnd Call\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n\t\t\t\t\t\t\t<PhoneIcon fontSize=\"large\" />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{idToCall}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{receivingCall && !callAccepted ? (\r\n\t\t\t\t\t\t<div className=\"caller\">\r\n\t\t\t\t\t\t<h1 >{name} is calling...</h1>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n\t\t\t\t\t\t\tAnswer\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</> */}\r\n    \r\n        \r\n      </div>\r\n\r\n    )}\r\n  </div>\r\n  \r\n\r\n)\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default VideoCall"]},"metadata":{},"sourceType":"module"}