{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashar\\\\Desktop\\\\current tele\\\\Tele-Healthcare\\\\Tele-Healthcare\\\\Client\\\\src\\\\pages\\\\VideoCall.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from 'axios';\nimport '../App.css';\nimport Doctor from '../components/doctorDashboard';\nimport Button from \"@material-ui/core/Button\";\nimport { IconButton } from '@material-ui/core/IconButton';\nimport { TextField } from '@material-ui/core/TextField';\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport Peer from \"simple-peer\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001/video_call\");\n\nfunction VideoCall() {\n  _s();\n\n  const [me, setMe] = useState(\"\");\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const [callerAccepted, setCallAccepted] = useState(false);\n  const [idToCall, setIdToCall] = useState(\"\");\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState(\"\");\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef(); // used for ending the call\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n      myVideo.current.srcObject = stream;\n    });\n    socket.on('me', id => {\n      setMe(id);\n    });\n    socket.on('callUser', data => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setName(data.name);\n      setCallerSignal(data.signal);\n    });\n  }, []); // ablwe to call the user\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"callUser\", {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name: name\n      });\n    });\n    peer.on(\"stream\", stream => {\n      userVideo.current.srcObject = stream;\n    });\n    socket.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"answerCall\", {\n        signal: data,\n        to: caller\n      });\n    });\n    peer.on(\"stream\", stream => {\n      userVideo.current.srcObject = stream;\n    });\n    peer.signal(callerSignal);\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n  };\n\n  const [list, setList] = useState([]);\n  const [patient_name, setuserName] = useState('');\n  const [patient_gender, setpassword] = useState('');\n  const [patient_age, setstatus] = useState();\n  const [render, setRender] = useState(true);\n\n  const getDoctorID = () => {\n    Axios.get('http://localhost:3001/Doctor_ID').then(res => {\n      // setList(res.data)\n      var string = JSON.stringify(res.data);\n      var json = JSON.parse(string); // alert(string)\n      // alert(json.doctor_id);\n\n      if (json.doctor_id === 0) {\n        setRender(false);\n        window.location = '/';\n        alert(\"You Need To Sign In First!!!\");\n      } // else{\n      //   setRender(true)\n      // }\n\n    });\n  };\n\n  getDoctorID();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: render && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Doctor, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\",\n          color: \"#fff\"\n        },\n        children: \"Zoomish\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video\",\n            children: stream && /*#__PURE__*/_jsxDEV(\"video\", {\n              playsInline: true,\n              muted: true,\n              ref: myVideo,\n              autoPlay: true,\n              style: {\n                width: \"300px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 30\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video\",\n            children: callerAccepted && !callEnded ? /*#__PURE__*/_jsxDEV(\"video\", {\n              playsInline: true,\n              ref: userVideo,\n              autoPlay: true,\n              style: {\n                width: \"300px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 19\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"myId\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            id: \"filled-basic\",\n            label: \"Name\",\n            variant: \"filled\",\n            value: name,\n            onChange: e => setName(e.target.value),\n            style: {\n              marginBottom: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n            text: me,\n            style: {\n              marginBottom: \"2rem\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(AssignmentIcon, {\n                fontSize: \"large\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 61\n              }, this),\n              children: \"Copy ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 6\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            id: \"filled-basic\",\n            label: \"ID to call\",\n            variant: \"filled\",\n            value: idToCall,\n            onChange: e => setIdToCall(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"call-button\",\n            children: [callAccepted && !callEnded ? /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"secondary\",\n              onClick: leaveCall,\n              children: \"End Call\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 7\n            }, this) : /*#__PURE__*/_jsxDEV(IconButton, {\n              color: \"primary\",\n              \"aria-label\": \"call\",\n              onClick: () => callUser(idToCall),\n              children: /*#__PURE__*/_jsxDEV(PhoneIcon, {\n                fontSize: \"large\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 8\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 7\n            }, this), idToCall]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: receivingCall && !callAccepted ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"caller\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: [name, \" is calling...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: answerCall,\n              children: \"Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 7\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoCall, \"fgPqocRHCebUAQEbuIhg/mf+c9Y=\");\n\n_c = VideoCall;\nexport default VideoCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"sources":["C:/Users/ashar/Desktop/current tele/Tele-Healthcare/Tele-Healthcare/Client/src/pages/VideoCall.js"],"names":["React","useEffect","useRef","useState","Axios","Doctor","Button","IconButton","TextField","AssignmentIcon","PhoneIcon","Peer","io","socket","connect","VideoCall","me","setMe","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callerAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","setName","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","on","id","data","from","signal","callUser","peer","initiator","trickle","emit","userToCall","signalData","answerCall","to","leaveCall","destroy","list","setList","patient_name","setuserName","patient_gender","setpassword","patient_age","setstatus","render","setRender","getDoctorID","get","res","string","JSON","stringify","json","parse","doctor_id","window","location","alert","textAlign","color","width","e","target","value","marginBottom","callAccepted"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport Axios from'axios';\r\nimport '../App.css'\r\nimport Doctor from '../components/doctorDashboard'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { IconButton } from '@material-ui/core/IconButton';\r\nimport { TextField } from '@material-ui/core/TextField';\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\r\nimport PhoneIcon from \"@material-ui/icons/Phone\"\r\nimport Peer from \"simple-peer\"\r\nimport io from \"socket.io-client\"\r\n\r\n\r\n\r\nconst socket = io.connect(\"http://localhost:3001/video_call\")\r\n\r\n\r\n\r\nfunction VideoCall() {\r\n\r\n\r\nconst [me, setMe] = useState(\"\")\r\nconst [stream, setStream] = useState()\r\nconst [receivingCall, setReceivingCall] = useState(false)\r\nconst [caller, setCaller] = useState(\"\")\r\nconst [callerSignal, setCallerSignal] = useState()\r\nconst [callerAccepted, setCallAccepted] = useState(false)\r\nconst [idToCall, setIdToCall] = useState(\"\")\r\nconst [callEnded, setCallEnded] = useState(false)\r\nconst [name, setName] = useState(\"\")\r\n\r\n\r\nconst myVideo = useRef()\r\nconst userVideo = useRef()\r\nconst connectionRef = useRef()  // used for ending the call\r\n\r\n\r\nuseEffect(()=>{\r\n    navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n        audio: true\r\n    }).then((stream)=>{\r\n        setStream(stream)\r\n        myVideo.current.srcObject = stream\r\n\r\n    })\r\n\r\n    socket.on('me', (id)=>{\r\n        setMe(id)\r\n    })\r\n\r\n\r\n    \r\n    socket.on('callUser', (data)=>{\r\n        setReceivingCall(true)\r\n        setCaller(data.from)\r\n        setName(data.name)\r\n        setCallerSignal(data.signal)\r\n    })\r\n\r\n}, [])\r\n\r\n// ablwe to call the user\r\nconst callUser = (id)=>{\r\n    const peer = new Peer({\r\n        initiator: true,\r\n        trickle: false,\r\n        stream: stream\r\n    })\r\n\r\n    peer.on(\"signal\", (data)=>{\r\n        socket.emit(\"callUser\", {\r\n            userToCall: id,\r\n            signalData: data,\r\n            from: me,\r\n            name:name\r\n        })\r\n    })\r\n\r\n\r\n    peer.on(\"stream\", (stream)=>{\r\n        userVideo.current.srcObject = stream\r\n    })\r\n\r\n\r\n    socket.on(\"callAccepted\", (signal)=>{\r\n        setCallAccepted(true)\r\n        peer.signal(signal)\r\n    })\r\n\r\n    connectionRef.current = peer\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst answerCall = ()=>{\r\n    setCallAccepted(true)\r\n    \r\n    \r\n    \r\n    const peer = new Peer({\r\n        initiator: false,\r\n        trickle: false,\r\n        stream: stream\r\n    })\r\n\r\n\r\n    peer.on(\"signal\", (data)=>{\r\n        socket.emit(\"answerCall\", {\r\n            signal: data,\r\n            to: caller\r\n        })\r\n    })\r\n\r\n\r\n    \r\n    peer.on(\"stream\", (stream)=>{\r\n        userVideo.current.srcObject = stream\r\n    })\r\n\r\n\r\n    \r\n    peer.signal(callerSignal)\r\n\r\n    connectionRef.current = peer\r\n\r\n}\r\n    \r\n\r\n\r\nconst leaveCall = ()=>{\r\n    setCallEnded(true)\r\n\r\n    connectionRef.current.destroy()\r\n}\r\n\r\n\r\n    const[list, setList]=useState([])\r\n    const [patient_name,setuserName]=useState('')\r\n    const [patient_gender,setpassword]=useState('')\r\n    const [patient_age,setstatus]=useState( )\r\n    \r\n\r\n\r\n        \r\n    const [render, setRender] = useState(true)\r\n\r\n    const getDoctorID = ()=>{\r\n      \r\n        Axios.get('http://localhost:3001/Doctor_ID').then(res => {\r\n                  \r\n        // setList(res.data)\r\n        \r\n      \r\n        var string = JSON.stringify(res.data)\r\n            \r\n        var json = JSON.parse(string)\r\n      \r\n      // alert(string)\r\n        // alert(json.doctor_id);\r\n\r\n\r\n        if(json.doctor_id === 0){\r\n          setRender(false)\r\n          window.location='/'\r\n          alert(\"You Need To Sign In First!!!\")\r\n        }\r\n        \r\n        // else{\r\n        //   setRender(true)\r\n        // }\r\n            })\r\n      \r\n      }\r\n      \r\n      getDoctorID()\r\n      \r\n\r\n\r\nreturn(\r\n\r\n    \r\n    <div>\r\n    {render && (\r\n      <div>\r\n      <Doctor/>\r\n\r\n      \r\n      <h1 style={{textAlign:\"center\", color: \"#fff\" }}>Zoomish</h1>\r\n\r\n      <div className='container'>\r\n          <div className='video-container'>\r\n              <div className='video'>\r\n                  {stream && <video playsInline muted ref={myVideo} autoPlay style={{width:\"300px\"}} />}\r\n\r\n              </div>\r\n\r\n              <div className='video'>\r\n\r\n                  {callerAccepted && !callEnded ?\r\n                  <video playsInline ref={userVideo} autoPlay style={{width:\"300px\"}} />: null\r\n                }\r\n              </div>\r\n\r\n          </div>\r\n\r\n          <div className=\"myId\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\tstyle={{ marginBottom: \"20px\" }}\r\n\t\t\t\t/>\r\n\t\t\t\t<CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\r\n\t\t\t\t\t\tCopy ID\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</CopyToClipboard>\r\n\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"ID to call\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={idToCall}\r\n\t\t\t\t\tonChange={(e) => setIdToCall(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"call-button\">\r\n\t\t\t\t\t{callAccepted && !callEnded ? (\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n\t\t\t\t\t\t\tEnd Call\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n\t\t\t\t\t\t\t<PhoneIcon fontSize=\"large\" />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{idToCall}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{receivingCall && !callAccepted ? (\r\n\t\t\t\t\t\t<div className=\"caller\">\r\n\t\t\t\t\t\t<h1 >{name} is calling...</h1>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n\t\t\t\t\t\t\tAnswer\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\r\n            \r\n      </div>\r\n  \r\n      </div>\r\n\r\n    )}\r\n  </div>\r\n  \r\n\r\n)\r\n\r\n\r\n}\r\n\r\nexport default VideoCall"]},"metadata":{},"sourceType":"module"}