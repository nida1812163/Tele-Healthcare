{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashar\\\\Desktop\\\\current tele\\\\Tele-Healthcare\\\\Tele-Healthcare\\\\Client\\\\src\\\\pages\\\\VideoCall.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from 'axios';\nimport '../App.css';\nimport Doctor from '../components/doctorDashboard';\nimport Button from \"@material-ui/core/Button\";\nimport { IconButton, TextField, makeStyles } from '@material-ui/core';\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Peer from \"peerjs\";\nimport io from \"socket.io-client\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3001\"); // This will generate the user ID dynamically\n\nconst myPeer = new Peer(undefined, {\n  host: '/',\n  port: '5000'\n});\n\nfunction VideoCall() {\n  _s();\n\n  const useStyles = makeStyles(theme => ({\n    video: {\n      width: '500px',\n      height: '1000px',\n      [theme.breakpoints.down('xs')]: {\n        width: '300px'\n      }\n    },\n    gridContainer: {\n      justifyContent: 'center',\n      [theme.breakpoints.down('xs')]: {\n        flexDirection: 'column'\n      }\n    },\n    paper: {\n      padding: '10px',\n      border: '2px solid black',\n      margin: '10px'\n    }\n  }));\n  const [render, setRender] = useState(true);\n\n  const getDoctorID = () => {\n    Axios.get('http://localhost:3001/Doctor_ID').then(res => {\n      // setList(res.data)\n      var string = JSON.stringify(res.data);\n      var json = JSON.parse(string); // alert(string)\n      // alert(json.doctor_id);\n\n      if (json.doctor_id === 0) {\n        setRender(false);\n        window.location = '/';\n        alert(\"You Need To Sign In First!!!\");\n      } // else{\n      //   setRender(true)\n      // }\n\n    });\n  };\n\n  getDoctorID(); // const [ me, setMe ] = useState(\"\")\n  // const [ stream, setStream ] = useState()\n  // const [ receivingCall, setReceivingCall ] = useState(false)\n  // const [ caller, setCaller ] = useState(\"\")\n  // const [ callerSignal, setCallerSignal ] = useState()\n  // const [ callAccepted, setCallAccepted ] = useState(false)\n  // const [ idToCall, setIdToCall ] = useState(\"\")\n  // const [ callEnded, setCallEnded] = useState(false)\n  // const [ name, setName ] = useState(\"\")\n  // const myVideo = useRef()\n  // const userVideo = useRef()\n  // const connectionRef= useRef()\n  // useEffect(() => {\n  // \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\n  // \t\tsetStream(stream)\n  // \t\t\tmyVideo.current.srcObject = stream\n  // \t})\n  // socket.on(\"me\", (id) => {\n  // \t\tsetMe(id)\n  // \t})\n  // \tsocket.on(\"callUser\", (data) => {\n  // \t\tsetReceivingCall(true)\n  // \t\tsetCaller(data.from)\n  // \t\tsetName(data.name)\n  // \t\tsetCallerSignal(data.signal)\n  // \t})\n  // }, [])\n  // const callUser = (id) => {\n  // \tconst peer = new Peer({\n  // \t\tinitiator: true,\n  // \t\ttrickle: false,\n  // \t\tstream: stream\n  // \t})\n  // \tpeer.on(\"signal\", (data) => {\n  // \t\tsocket.emit(\"callUser\", {\n  // \t\t\tuserToCall: id,\n  // \t\t\tsignalData: data,\n  // \t\t\tfrom: me,\n  // \t\t\tname: name\n  // \t\t})\n  // \t})\n  // \tpeer.on(\"stream\", (stream) => {\n  // \t\t\tuserVideo.current.srcObject = stream\n  // \t})\n  // \tsocket.on(\"callAccepted\", (signal) => {\n  // \t\tsetCallAccepted(true)\n  // \t\tpeer.signal(signal)\n  // \t})\n  // \tconnectionRef.current = peer\n  // }\n  // const answerCall =() =>  {\n  // \tsetCallAccepted(true)\n  // \tconst peer = new Peer({\n  // \t\tinitiator: false,\n  // \t\ttrickle: false,\n  // \t\tstream: stream\n  // \t})\n  // \tpeer.on(\"signal\", (data) => {\n  // \t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\n  // \t})\n  // \tpeer.on(\"stream\", (stream) => {\n  // \t\tuserVideo.current.srcObject = stream\n  // \t})\n  // \tpeer.signal(callerSignal)\n  // \tconnectionRef.current = peer\n  // }\n  // const leaveCall = () => {\n  // \tsetCallEnded(true)\n  // \tconnectionRef.current.destroy()\n  // }\n\n  const [stream, setStream] = useState();\n  const myVideo = useRef();\n  const [video_id, setVideoId] = useState(useParams().video_id); //   alert(video_id)\n  // \t  const myVideo = document.createElement('video')\n  // \t  myVideo.muted = true\n\n  const peers = {};\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n      myVideo.current.srcObject = stream; // addVideoStream(myVideo, stream)Z\n\n      myPeer.on('call', call => {\n        // alert('dd')\n        call.answer(stream);\n        const video = document.createElement('video'); // event for the user to send their stream to us\n\n        call.on('stream', userVideoStream => {\n          addVideoStream(video, userVideoStream);\n        });\n      });\n      socket.on('user-connected', userId => {\n        // alert(userId)\n        // console.log(userId)\n        setTimeout(connectToNewUser, 1000, userId, stream);\n      });\n    });\n  }, []); // \t  const [video_id,setVideoId]=useState(useParams().video_id)\n  // \t  //   alert(video_id)\n  // // \t  const myVideo = document.createElement('video')\n  // // \t  myVideo.muted = true\n  // \t  const peers = {}\n  // \t  navigator.mediaDevices.getUserMedia({\n  // \t\t  video: true,\n  // \t\t  audio: true\n  // \t  }).then((stream)=>{ // stream is gonna be video and audio\n  // addVideoStream(myVideo, stream)\n  // \t// setStream(stream)\n  // \tmyPeer.on('call', (call)=>{\n  // \t\talert('dd')\n  // \t\tcall.answer(stream)\n  // \t\t  const video = document.createElement('video')\n  // \t\t// event for the user to send their stream to us\n  // \t\tcall.on('stream', (userVideoStream)=>{\n  // \t\t\taddVideoStream(video, userVideoStream)\n  // \t\t})\n  // \t  })\n  // \t  socket.on('user-connected', (userId)=>{\n  // \t\t// alert(userId)\n  // \t\t// console.log(userId)\n  // \t\t// connectToNewUser(userId, stream)\n  // \t\tsetTimeout(connectToNewUser,1000,userId,stream)\n  // \t})\t\n  //   })\n\n  socket.on('user-disconnected', userId => {\n    console.log('user: ' + userId);\n\n    if (peers[userId]) {\n      peers[userId].close();\n    }\n  });\n  myPeer.on('open', id => {\n    // Send an event to the server\n    socket.emit('join-room', video_id, id);\n  });\n\n  function addVideoStream(video, stream) {\n    video.srcObject = stream; // video.play()\n    // loading stream \n\n    video.addEventListener('loadedmetadata', () => {\n      video.play(); // play video\n    });\n    const videoGrid = document.getElementById('video-grid'); // videoGrid.append(video)\n\n    setStream(video);\n  }\n\n  function connectToNewUser(userId, stream) {\n    const call = myPeer.call(userId, stream); // calling the user and sending our stream\n\n    const video = document.createElement('video'); // event for the user to send their stream to us\n\n    call.on('stream', userVideoStream => {\n      addVideoStream(video, userVideoStream);\n    });\n    call.on('close', () => {\n      video.remove();\n    });\n    peers[userId] = call;\n  }\n\n  const kk = () => {\n    var tble = document.getElementById('table');\n    var row = tble.rows;\n    row[2].deleteCell(0);\n    alert(row.length);\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: render && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Doctor, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: '350px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"table\",\n          style: {},\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              children: stream && /*#__PURE__*/_jsxDEV(\"video\", {\n                className: classes.video,\n                playsInline: true,\n                muted: true,\n                ref: myVideo,\n                autoPlay: true,\n                style: {\n                  width: \"300px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 2\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 2\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoCall, \"oVbC6s1UwoRVOgVXbsv//wGdxZ0=\", false, function () {\n  return [useParams, useStyles];\n});\n\n_c = VideoCall;\nexport default VideoCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"sources":["C:/Users/ashar/Desktop/current tele/Tele-Healthcare/Tele-Healthcare/Client/src/pages/VideoCall.js"],"names":["React","useEffect","useRef","useState","Axios","Doctor","Button","IconButton","TextField","makeStyles","AssignmentIcon","PhoneIcon","CopyToClipboard","Peer","io","useParams","socket","myPeer","undefined","host","port","VideoCall","useStyles","theme","video","width","height","breakpoints","down","gridContainer","justifyContent","flexDirection","paper","padding","border","margin","render","setRender","getDoctorID","get","then","res","string","JSON","stringify","data","json","parse","doctor_id","window","location","alert","stream","setStream","myVideo","video_id","setVideoId","peers","navigator","mediaDevices","getUserMedia","audio","current","srcObject","on","call","answer","document","createElement","userVideoStream","addVideoStream","userId","setTimeout","connectToNewUser","console","log","close","id","emit","addEventListener","play","videoGrid","getElementById","remove","kk","tble","row","rows","deleteCell","length","classes","marginLeft"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport Axios from'axios';\r\nimport '../App.css'\r\nimport Doctor from '../components/doctorDashboard'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { IconButton, TextField, makeStyles } from '@material-ui/core';\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\r\nimport PhoneIcon from \"@material-ui/icons/Phone\"\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\nimport Peer from \"peerjs\"\r\nimport io from \"socket.io-client\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n\r\nconst socket = io(\"http://localhost:3001\")\r\n\r\n\r\n\r\n\t\t// This will generate the user ID dynamically\r\n\tconst myPeer = new Peer(undefined, {\r\n\t\thost: '/',\r\n\t\tport: '5000'\r\n\t})\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n\r\nfunction VideoCall() {\r\n\r\n\r\n\tconst useStyles = makeStyles((theme) => ({\r\n\t\tvideo: {\r\n\t\t  width: '500px',\r\n\t\t  height:'1000px',\r\n\t\t  [theme.breakpoints.down('xs')]: {\r\n\t\t\twidth: '300px',\r\n\t\t  },\r\n\t\t},\r\n\t\tgridContainer: {\r\n\t\t  justifyContent: 'center',\r\n\t\t  [theme.breakpoints.down('xs')]: {\r\n\t\t\tflexDirection: 'column',\r\n\t\t  },\r\n\t\t},\r\n\t\tpaper: {\r\n\t\t  padding: '10px',\r\n\t\t  border: '2px solid black',\r\n\t\t  margin: '10px',\r\n\t\t},\r\n\t  }));\r\n\r\n\r\n\r\n    const [render, setRender] = useState(true)\r\n\r\n    const getDoctorID = ()=>{\r\n      \r\n        Axios.get('http://localhost:3001/Doctor_ID').then(res => {\r\n                  \r\n        // setList(res.data)\r\n        \r\n      \r\n        var string = JSON.stringify(res.data)\r\n            \r\n        var json = JSON.parse(string)\r\n      \r\n      // alert(string)\r\n        // alert(json.doctor_id);\r\n\r\n\r\n        if(json.doctor_id === 0){\r\n          setRender(false)\r\n          window.location='/'\r\n          alert(\"You Need To Sign In First!!!\")\r\n        }\r\n        \r\n        // else{\r\n        //   setRender(true)\r\n        // }\r\n            })\r\n      \r\n      }\r\n      \r\n      getDoctorID()\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\t      // const [ me, setMe ] = useState(\"\")\r\n\t// const [ stream, setStream ] = useState()\r\n\t// const [ receivingCall, setReceivingCall ] = useState(false)\r\n\t// const [ caller, setCaller ] = useState(\"\")\r\n\t// const [ callerSignal, setCallerSignal ] = useState()\r\n\t// const [ callAccepted, setCallAccepted ] = useState(false)\r\n\t// const [ idToCall, setIdToCall ] = useState(\"\")\r\n\t// const [ callEnded, setCallEnded] = useState(false)\r\n\t// const [ name, setName ] = useState(\"\")\r\n\t// const myVideo = useRef()\r\n\t// const userVideo = useRef()\r\n\t// const connectionRef= useRef()\r\n\r\n\t// useEffect(() => {\r\n\t// \tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n\t// \t\tsetStream(stream)\r\n\t// \t\t\tmyVideo.current.srcObject = stream\r\n\t// \t})\r\n\r\n\t// socket.on(\"me\", (id) => {\r\n\t// \t\tsetMe(id)\r\n\t// \t})\r\n\r\n\t// \tsocket.on(\"callUser\", (data) => {\r\n\t// \t\tsetReceivingCall(true)\r\n\t// \t\tsetCaller(data.from)\r\n\t// \t\tsetName(data.name)\r\n\t// \t\tsetCallerSignal(data.signal)\r\n\t// \t})\r\n\t// }, [])\r\n\r\n\t// const callUser = (id) => {\r\n\t// \tconst peer = new Peer({\r\n\t// \t\tinitiator: true,\r\n\t// \t\ttrickle: false,\r\n\t// \t\tstream: stream\r\n\t// \t})\r\n\t// \tpeer.on(\"signal\", (data) => {\r\n\t// \t\tsocket.emit(\"callUser\", {\r\n\t// \t\t\tuserToCall: id,\r\n\t// \t\t\tsignalData: data,\r\n\t// \t\t\tfrom: me,\r\n\t// \t\t\tname: name\r\n\t// \t\t})\r\n\t// \t})\r\n\t// \tpeer.on(\"stream\", (stream) => {\r\n\t\t\t\r\n\t// \t\t\tuserVideo.current.srcObject = stream\r\n\t\t\t\r\n\t// \t})\r\n\t// \tsocket.on(\"callAccepted\", (signal) => {\r\n\t// \t\tsetCallAccepted(true)\r\n\t// \t\tpeer.signal(signal)\r\n\t// \t})\r\n\r\n\t// \tconnectionRef.current = peer\r\n\t// }\r\n\r\n\t// const answerCall =() =>  {\r\n\t// \tsetCallAccepted(true)\r\n\t// \tconst peer = new Peer({\r\n\t// \t\tinitiator: false,\r\n\t// \t\ttrickle: false,\r\n\t// \t\tstream: stream\r\n\t// \t})\r\n\t// \tpeer.on(\"signal\", (data) => {\r\n\t// \t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\r\n\t// \t})\r\n\t// \tpeer.on(\"stream\", (stream) => {\r\n\t// \t\tuserVideo.current.srcObject = stream\r\n\t// \t})\r\n\r\n\t// \tpeer.signal(callerSignal)\r\n\t// \tconnectionRef.current = peer\r\n\t// }\r\n\r\n\t// const leaveCall = () => {\r\n\t// \tsetCallEnded(true)\r\n\t// \tconnectionRef.current.destroy()\r\n\t// }\r\n    \r\n\r\n\r\n\r\n\r\n\tconst [ stream, setStream ] = useState()\r\n\tconst myVideo = useRef()\r\n\t\r\n\r\n\r\n\tconst [video_id,setVideoId]=useState(useParams().video_id)\r\n\t  \r\n\t//   alert(video_id)\r\n\t\r\n\r\n// \t  const myVideo = document.createElement('video')\r\n// \t  myVideo.muted = true\r\n\r\n\r\n\tconst peers = {}\r\n\r\n\r\n\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n\t\t\tsetStream(stream)\r\n\t\t\t\tmyVideo.current.srcObject = stream\r\n\r\n\r\n\t\t\t\t\t// addVideoStream(myVideo, stream)Z\r\n\r\n\r\n\r\n\t\tmyPeer.on('call', (call)=>{\r\n\r\n\t\t\t// alert('dd')\r\n\t\t\t\r\n\t\t\tcall.answer(stream)\r\n\t\t\t  \r\n\t\t\t  const video = document.createElement('video')\r\n\t\r\n\t\r\n\t\t\t// event for the user to send their stream to us\r\n\t\t\tcall.on('stream', (userVideoStream)=>{\r\n\t\t\t\taddVideoStream(video, userVideoStream)\r\n\t\t\t})\r\n\t\r\n\t\t  })\r\n\r\n\t\t  \r\n\r\n\t\t  socket.on('user-connected', (userId)=>{\r\n\t\t\t// alert(userId)\r\n\t\t\t// console.log(userId)\r\n\r\n\t\t\tsetTimeout(connectToNewUser,1000,userId,stream)\r\n\t\t})\r\n\t})\r\n\r\n\t}, [])\r\n\r\n\r\n\t\r\n    \r\n\r\n\r\n\r\n\r\n        \r\n// \t  const [video_id,setVideoId]=useState(useParams().video_id)\r\n\t  \r\n// \t  //   alert(video_id)\r\n\t  \r\n\r\n// // \t  const myVideo = document.createElement('video')\r\n// // \t  myVideo.muted = true\r\n  \r\n\r\n// \t  const peers = {}\r\n  \r\n\r\n\r\n\r\n// \t  navigator.mediaDevices.getUserMedia({\r\n// \t\t  video: true,\r\n// \t\t  audio: true\r\n// \t  }).then((stream)=>{ // stream is gonna be video and audio\r\n\r\n\r\n  \r\n\r\n\t\r\n\t\r\n\t// addVideoStream(myVideo, stream)\r\n\r\n\r\n\t// \t// setStream(stream)\r\n\r\n\t\t\r\n\r\n\t\t\r\n\r\n\r\n\r\n\t// \tmyPeer.on('call', (call)=>{\r\n\r\n\t// \t\talert('dd')\r\n\t\t\t\r\n\t// \t\tcall.answer(stream)\r\n\t\t\t  \r\n\t// \t\t  const video = document.createElement('video')\r\n\t\r\n\t\r\n\t// \t\t// event for the user to send their stream to us\r\n\t// \t\tcall.on('stream', (userVideoStream)=>{\r\n\t// \t\t\taddVideoStream(video, userVideoStream)\r\n\t// \t\t})\r\n\t\r\n\t// \t  })\r\n\r\n\t\t  \r\n\r\n\t// \t  socket.on('user-connected', (userId)=>{\r\n\t// \t\t// alert(userId)\r\n\t// \t\t// console.log(userId)\r\n\r\n\t// \t\t// connectToNewUser(userId, stream)\r\n\r\n\t// \t\tsetTimeout(connectToNewUser,1000,userId,stream)\r\n\t// \t})\t\r\n\t\r\n\r\n\t\t\r\n\t//   })\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\t  socket.on('user-disconnected', (userId)=>{\r\n\t\t\r\n\t\tconsole.log('user: ' + userId)\r\n\t\t\r\n\t\tif(peers[userId]){\r\n\t\t\t  peers[userId].close()\r\n\t\t  }\r\n\t  })\r\n\r\n\r\n\t  myPeer.on('open', (id)=>{\t\t\r\n\r\n\t\t// Send an event to the server\r\n\t\tsocket.emit('join-room', video_id, id)\r\n\t\r\n\t})\r\n\t\r\n\t\r\n\r\n\r\n    function addVideoStream(video, stream){\r\n\r\n\t\r\n\t\tvideo.srcObject = stream\r\n\r\n\t\t// video.play()\r\n\t\t\r\n\t\t// loading stream \r\n\t\tvideo.addEventListener('loadedmetadata', ()=>{\r\n\t\t\tvideo.play() // play video\r\n\t\t})\r\n\r\n\r\n\t\t\r\n\t\tconst videoGrid = document.getElementById('video-grid')\r\n\t\t\r\n\t\t// videoGrid.append(video)\r\n\t\t\r\n\t\tsetStream(video)\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction connectToNewUser(userId, stream){\r\n\r\n\t\t\r\n\t\tconst call = myPeer.call(userId, stream) // calling the user and sending our stream\r\n\t\t\r\n\t\tconst video = document.createElement('video')\r\n\r\n\t\t// event for the user to send their stream to us\r\n\t\tcall.on('stream', (userVideoStream)=>{\r\n\t\t\taddVideoStream(video, userVideoStream)\r\n\t\t})\r\n\r\n\t\tcall.on('close', ()=>{\r\n\t\t\tvideo.remove()\r\n\t\t})\r\n\r\n\r\n\t\tpeers[userId] = call\r\n\r\n\t}\r\n\r\n\r\n\r\nconst kk= ()=>{\r\n\tvar tble = document.getElementById('table');\r\n            var row = tble.rows\r\n\r\n\t\t\trow[2].deleteCell(0)\r\n\r\n\t\t\t\r\n\t\t\talert(row.length)\r\n\r\n}\r\n\r\n\r\nconst classes = useStyles();\r\n\r\nreturn(\r\n\r\n    \r\n    <div>\r\n    {render && (\r\n\t\t<div>\r\n\r\n<Doctor/>\r\n\r\n<div  style={{marginLeft:'350px'}}>\r\n\t\t  \r\n\t\t  <table id=\"table\" \r\n\t\t  style={{}}>\r\n\t\r\n\t\r\n\t\r\n\t<tr>\r\n\t<th>\r\n\t\t{stream &&  <video className={classes.video}  playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\r\n\t\r\n\t</th>\r\n\t</tr>\r\n\t\t\t</table>\r\n\t\r\n\t\r\n\t\t  </div>\r\n\r\n\r\n\r\n\r\n\t\t  {/* <script src='/VideoCall.js'></script> */}\r\n      \r\n\t  \r\n\t  {/* <Doctor/> */}\r\n\r\n\r\n\r\n{/* \r\n      <>\r\n\t\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"video-container\">\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{callAccepted && !callEnded ?\r\n\t\t\t\t\t<video playsInline ref={userVideo} autoPlay style={{ width: \"300px\"}} />:\r\n\t\t\t\t\tnull}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"myId\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\tstyle={{ marginBottom: \"20px\" }}\r\n\t\t\t\t/>\r\n\t\t\t\t<CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\r\n\t\t\t\t\t\tCopy ID\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</CopyToClipboard>\r\n\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"ID to call\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={idToCall}\r\n\t\t\t\t\tonChange={(e) => setIdToCall(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"call-button\">\r\n\t\t\t\t\t{callAccepted && !callEnded ? (\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n\t\t\t\t\t\t\tEnd Call\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n\t\t\t\t\t\t\t<PhoneIcon fontSize=\"large\" />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{idToCall}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{receivingCall && !callAccepted ? (\r\n\t\t\t\t\t\t<div className=\"caller\">\r\n\t\t\t\t\t\t<h1 >{name} is calling...</h1>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n\t\t\t\t\t\t\tAnswer\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</> */}\r\n    \r\n        \r\n      </div>\r\n\r\n    )}\r\n  </div>\r\n  \r\n\r\n)\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default VideoCall"]},"metadata":{},"sourceType":"module"}