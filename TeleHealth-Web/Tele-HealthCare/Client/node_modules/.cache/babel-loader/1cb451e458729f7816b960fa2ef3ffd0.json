{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashar\\\\Desktop\\\\current tele\\\\Tele-Healthcare\\\\Tele-Healthcare\\\\Client\\\\src\\\\pages\\\\VideoCall.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from 'axios';\nimport '../App.css';\nimport Doctor from '../components/doctorDashboard';\nimport Button from \"@material-ui/core/Button\";\nimport { IconButton, TextField } from '@material-ui/core';\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Peer from \"peerjs\";\nimport io from \"socket.io-client\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3001\"); // This will generate the user ID dynamically\n\nconst myPeer = new Peer(undefined, {\n  host: '/',\n  port: '5000'\n});\n\nfunction VideoCall() {\n  _s();\n\n  const [stream, setStream] = useState();\n  const myVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n      myVideo.current.srcObject = stream;\n    });\n    socket.on(\"me\", id => {\n      setMe(id);\n    });\n    socket.on(\"callUser\", data => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setName(data.name);\n      setCallerSignal(data.signal);\n    });\n  }, []);\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"callUser\", {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name: name\n      });\n    });\n    peer.on(\"stream\", stream => {\n      userVideo.current.srcObject = stream;\n    });\n    socket.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"answerCall\", {\n        signal: data,\n        to: caller\n      });\n    });\n    peer.on(\"stream\", stream => {\n      userVideo.current.srcObject = stream;\n    });\n    peer.signal(callerSignal);\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n  };\n\n  const [render, setRender] = useState(true);\n\n  const getDoctorID = () => {\n    Axios.get('http://localhost:3001/Doctor_ID').then(res => {\n      // setList(res.data)\n      var string = JSON.stringify(res.data);\n      var json = JSON.parse(string); // alert(string)\n      // alert(json.doctor_id);\n\n      if (json.doctor_id === 0) {\n        setRender(false);\n        window.location = '/';\n        alert(\"You Need To Sign In First!!!\");\n      } // else{\n      //   setRender(true)\n      // }\n\n    });\n  };\n\n  getDoctorID(); // \t  const [video_id,setVideoId]=useState(useParams().video_id)\n  // \t  //   alert(video_id)\n  // \t  const [stream, setStream] = useState()\n  // \t//   const videoGrid = document.getElementById('video-grid')\n  // \t  const myVideo = document.createElement('video')\n  // \t  myVideo.muted = true\n  // \t  const peers = {}\n  // \t  navigator.mediaDevices.getUserMedia({\n  // \t\t  video: true,\n  // \t\t  audio: true\n  // \t  }).then((stream)=>{ // stream is gonna be video and audio\n  // \taddVideoStream(myVideo, stream)\n  // \t\t// setStream(stream)\n  // \t\tmyPeer.on('call', (call)=>{\n  // \t\t\talert('dd')\n  // \t\t\tcall.answer(stream)\n  // \t\t\t  const video = document.createElement('video')\n  // \t\t\t// event for the user to send their stream to us\n  // \t\t\tcall.on('stream', (userVideoStream)=>{\n  // \t\t\t\taddVideoStream(video, userVideoStream)\n  // \t\t\t})\n  // \t\t  })\n  // \t\t  socket.on('user-connected', (userId)=>{\n  // \t\t\t// alert(userId)\n  // \t\t\t// console.log(userId)\n  // \t\t\t// connectToNewUser(userId, stream)\n  // \t\t\tsetTimeout(connectToNewUser,1000,userId,stream)\n  // \t\t})\t\n  // \t  })\n  // \t  socket.on('user-disconnected', (userId)=>{\n  // \t\tconsole.log('user: ' + userId)\n  // \t\tif(peers[userId]){\n  // \t\t\t  peers[userId].close()\n  // \t\t  }\n  // \t  })\n  // \t  myPeer.on('open', (id)=>{\t\t\n  // \t\t// Send an event to the server\n  // \t\tsocket.emit('join-room', video_id, id)\n  // \t})\n  //     function addVideoStream(video, stream){\n  // \t\tvideo.srcObject = stream\n  // \t\t// video.play()\n  // \t\t// loading stream \n  // \t\tvideo.addEventListener('loadedmetadata', ()=>{\n  // \t\t\tvideo.play() // play video\n  // \t\t})\n  // \t\tconst videoGrid = document.getElementById('video-grid')\n  // \t\t// videoGrid.append(video)\n  // \t\tsetStream(video)\n  // \t}\n  // \tfunction connectToNewUser(userId, stream){\n  // \t\tconst call = myPeer.call(userId, stream) // calling the user and sending our stream\n  // \t\tconst video = document.createElement('video')\n  // \t\t// event for the user to send their stream to us\n  // \t\tcall.on('stream', (userVideoStream)=>{\n  // \t\t\taddVideoStream(video, userVideoStream)\n  // \t\t})\n  // \t\tcall.on('close', ()=>{\n  // \t\t\tvideo.remove()\n  // \t\t})\n  // \t\tpeers[userId] = call\n  // \t}\n  // const kk= ()=>{\n  // \tvar tble = document.getElementById('table');\n  //             var row = tble.rows\n  // \t\t\trow[2].deleteCell(0)\n  // \t\t\talert(row.length)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: render && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\",\n          color: '#fff'\n        },\n        children: \"Zoomish\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video\",\n            children: stream && /*#__PURE__*/_jsxDEV(\"video\", {\n              playsInline: true,\n              muted: true,\n              ref: myVideo,\n              autoPlay: true,\n              style: {\n                width: \"300px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoCall, \"HW+OuYaq/Aip+0eC3DCw8YfMrIk=\");\n\n_c = VideoCall;\nexport default VideoCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"sources":["C:/Users/ashar/Desktop/current tele/Tele-Healthcare/Tele-Healthcare/Client/src/pages/VideoCall.js"],"names":["React","useEffect","useRef","useState","Axios","Doctor","Button","IconButton","TextField","AssignmentIcon","PhoneIcon","CopyToClipboard","Peer","io","useParams","socket","myPeer","undefined","host","port","VideoCall","stream","setStream","myVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","on","id","setMe","data","setReceivingCall","setCaller","from","setName","name","setCallerSignal","signal","callUser","peer","initiator","trickle","emit","userToCall","signalData","me","userVideo","setCallAccepted","answerCall","to","caller","callerSignal","leaveCall","setCallEnded","destroy","render","setRender","getDoctorID","get","res","string","JSON","stringify","json","parse","doctor_id","window","location","alert","textAlign","color","width"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport Axios from'axios';\r\nimport '../App.css'\r\nimport Doctor from '../components/doctorDashboard'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\r\nimport PhoneIcon from \"@material-ui/icons/Phone\"\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\nimport Peer from \"peerjs\"\r\nimport io from \"socket.io-client\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nconst socket = io(\"http://localhost:3001\")\r\n\r\n\r\n\r\n\t\t// This will generate the user ID dynamically\r\n\tconst myPeer = new Peer(undefined, {\r\n\t\thost: '/',\r\n\t\tport: '5000'\r\n\t})\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n\r\nfunction VideoCall() {\r\n\r\n\r\n\tconst [ stream, setStream ] = useState()\r\n\tconst myVideo = useRef()\r\n\tconst connectionRef= useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n\t\t\tsetStream(stream)\r\n\t\t\t\tmyVideo.current.srcObject = stream\r\n\t\t})\r\n\r\n\tsocket.on(\"me\", (id) => {\r\n\t\t\tsetMe(id)\r\n\t\t})\r\n\r\n\t\tsocket.on(\"callUser\", (data) => {\r\n\t\t\tsetReceivingCall(true)\r\n\t\t\tsetCaller(data.from)\r\n\t\t\tsetName(data.name)\r\n\t\t\tsetCallerSignal(data.signal)\r\n\t\t})\r\n\t}, [])\r\n\r\n\tconst callUser = (id) => {\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: true,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream: stream\r\n\t\t})\r\n\t\tpeer.on(\"signal\", (data) => {\r\n\t\t\tsocket.emit(\"callUser\", {\r\n\t\t\t\tuserToCall: id,\r\n\t\t\t\tsignalData: data,\r\n\t\t\t\tfrom: me,\r\n\t\t\t\tname: name\r\n\t\t\t})\r\n\t\t})\r\n\t\tpeer.on(\"stream\", (stream) => {\r\n\t\t\t\r\n\t\t\t\tuserVideo.current.srcObject = stream\r\n\t\t\t\r\n\t\t})\r\n\t\tsocket.on(\"callAccepted\", (signal) => {\r\n\t\t\tsetCallAccepted(true)\r\n\t\t\tpeer.signal(signal)\r\n\t\t})\r\n\r\n\t\tconnectionRef.current = peer\r\n\t}\r\n\r\n\tconst answerCall =() =>  {\r\n\t\tsetCallAccepted(true)\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: false,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream: stream\r\n\t\t})\r\n\t\tpeer.on(\"signal\", (data) => {\r\n\t\t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\r\n\t\t})\r\n\t\tpeer.on(\"stream\", (stream) => {\r\n\t\t\tuserVideo.current.srcObject = stream\r\n\t\t})\r\n\r\n\t\tpeer.signal(callerSignal)\r\n\t\tconnectionRef.current = peer\r\n\t}\r\n\r\n\tconst leaveCall = () => {\r\n\t\tsetCallEnded(true)\r\n\t\tconnectionRef.current.destroy()\r\n\t}\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n        \r\n    const [render, setRender] = useState(true)\r\n\r\n    const getDoctorID = ()=>{\r\n      \r\n        Axios.get('http://localhost:3001/Doctor_ID').then(res => {\r\n                  \r\n        // setList(res.data)\r\n        \r\n      \r\n        var string = JSON.stringify(res.data)\r\n            \r\n        var json = JSON.parse(string)\r\n      \r\n      // alert(string)\r\n        // alert(json.doctor_id);\r\n\r\n\r\n        if(json.doctor_id === 0){\r\n          setRender(false)\r\n          window.location='/'\r\n          alert(\"You Need To Sign In First!!!\")\r\n        }\r\n        \r\n        // else{\r\n        //   setRender(true)\r\n        // }\r\n            })\r\n      \r\n      }\r\n      \r\n      getDoctorID()\r\n      \r\n\r\n\r\n// \t  const [video_id,setVideoId]=useState(useParams().video_id)\r\n\t  \r\n// \t  //   alert(video_id)\r\n\t  \r\n// \t  const [stream, setStream] = useState()\r\n\r\n\r\n// \t//   const videoGrid = document.getElementById('video-grid')\r\n\r\n\r\n\t\t\r\n\r\n\r\n\r\n// \t  const myVideo = document.createElement('video')\r\n// \t  myVideo.muted = true\r\n  \r\n\r\n// \t  const peers = {}\r\n  \r\n\r\n\r\n\r\n// \t  navigator.mediaDevices.getUserMedia({\r\n// \t\t  video: true,\r\n// \t\t  audio: true\r\n// \t  }).then((stream)=>{ // stream is gonna be video and audio\r\n\r\n\r\n  \r\n\r\n\t\r\n\t\r\n// \taddVideoStream(myVideo, stream)\r\n\r\n\r\n// \t\t// setStream(stream)\r\n\r\n\t\t\r\n\r\n\t\t\r\n\r\n\r\n\r\n// \t\tmyPeer.on('call', (call)=>{\r\n\r\n// \t\t\talert('dd')\r\n\t\t\t\r\n// \t\t\tcall.answer(stream)\r\n\t\t\t  \r\n// \t\t\t  const video = document.createElement('video')\r\n\t\r\n\t\r\n// \t\t\t// event for the user to send their stream to us\r\n// \t\t\tcall.on('stream', (userVideoStream)=>{\r\n// \t\t\t\taddVideoStream(video, userVideoStream)\r\n// \t\t\t})\r\n\t\r\n// \t\t  })\r\n\r\n\t\t  \r\n\r\n// \t\t  socket.on('user-connected', (userId)=>{\r\n// \t\t\t// alert(userId)\r\n// \t\t\t// console.log(userId)\r\n\r\n// \t\t\t// connectToNewUser(userId, stream)\r\n\r\n// \t\t\tsetTimeout(connectToNewUser,1000,userId,stream)\r\n// \t\t})\t\r\n\t\r\n\r\n\t\t\r\n// \t  })\r\n  \r\n\r\n\r\n\r\n\r\n\r\n// \t  socket.on('user-disconnected', (userId)=>{\r\n\t\t\r\n// \t\tconsole.log('user: ' + userId)\r\n\t\t\r\n// \t\tif(peers[userId]){\r\n// \t\t\t  peers[userId].close()\r\n// \t\t  }\r\n// \t  })\r\n\r\n\r\n// \t  myPeer.on('open', (id)=>{\t\t\r\n\r\n// \t\t// Send an event to the server\r\n// \t\tsocket.emit('join-room', video_id, id)\r\n\t\r\n// \t})\r\n\t\r\n\t\r\n\r\n\r\n//     function addVideoStream(video, stream){\r\n\r\n\t\r\n// \t\tvideo.srcObject = stream\r\n\r\n// \t\t// video.play()\r\n\t\t\r\n// \t\t// loading stream \r\n// \t\tvideo.addEventListener('loadedmetadata', ()=>{\r\n// \t\t\tvideo.play() // play video\r\n// \t\t})\r\n\r\n\r\n\t\t\r\n// \t\tconst videoGrid = document.getElementById('video-grid')\r\n\t\t\r\n// \t\t// videoGrid.append(video)\r\n\t\t\r\n// \t\tsetStream(video)\r\n\r\n\r\n// \t}\r\n\r\n\r\n\r\n// \tfunction connectToNewUser(userId, stream){\r\n\r\n\t\t\r\n// \t\tconst call = myPeer.call(userId, stream) // calling the user and sending our stream\r\n\t\t\r\n// \t\tconst video = document.createElement('video')\r\n\r\n// \t\t// event for the user to send their stream to us\r\n// \t\tcall.on('stream', (userVideoStream)=>{\r\n// \t\t\taddVideoStream(video, userVideoStream)\r\n// \t\t})\r\n\r\n// \t\tcall.on('close', ()=>{\r\n// \t\t\tvideo.remove()\r\n// \t\t})\r\n\r\n\r\n// \t\tpeers[userId] = call\r\n\r\n// \t}\r\n\r\n\r\n\r\n// const kk= ()=>{\r\n// \tvar tble = document.getElementById('table');\r\n//             var row = tble.rows\r\n\r\n// \t\t\trow[2].deleteCell(0)\r\n\r\n\t\t\t\r\n// \t\t\talert(row.length)\r\n\r\n// }\r\n\r\n\r\n\r\n\r\nreturn(\r\n\r\n    \r\n    <div>\r\n    {render && (\r\n\t\t<div>\r\n\t\t\r\n\r\n\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"video-container\">\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t  {/* <script src='/VideoCall.js'></script> */}\r\n      \r\n\t  \r\n\t  {/* <Doctor/> */}\r\n\r\n\r\n\r\n{/* \r\n      <>\r\n\t\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"video-container\">\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{callAccepted && !callEnded ?\r\n\t\t\t\t\t<video playsInline ref={userVideo} autoPlay style={{ width: \"300px\"}} />:\r\n\t\t\t\t\tnull}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"myId\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\tstyle={{ marginBottom: \"20px\" }}\r\n\t\t\t\t/>\r\n\t\t\t\t<CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\r\n\t\t\t\t\t\tCopy ID\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</CopyToClipboard>\r\n\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"ID to call\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={idToCall}\r\n\t\t\t\t\tonChange={(e) => setIdToCall(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"call-button\">\r\n\t\t\t\t\t{callAccepted && !callEnded ? (\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n\t\t\t\t\t\t\tEnd Call\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n\t\t\t\t\t\t\t<PhoneIcon fontSize=\"large\" />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{idToCall}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{receivingCall && !callAccepted ? (\r\n\t\t\t\t\t\t<div className=\"caller\">\r\n\t\t\t\t\t\t<h1 >{name} is calling...</h1>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n\t\t\t\t\t\t\tAnswer\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</> */}\r\n    \r\n        \r\n      </div>\r\n\r\n    )}\r\n  </div>\r\n  \r\n\r\n)\r\n\r\n\r\n}\r\n\r\nexport default VideoCall"]},"metadata":{},"sourceType":"module"}